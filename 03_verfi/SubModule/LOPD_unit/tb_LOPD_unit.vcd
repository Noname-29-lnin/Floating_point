$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module tb_LOPD_unit $end
   $var wire 32 X SIZE_DATA [31:0] $end
   $var wire 32 Y SIZE_LOP [31:0] $end
   $var wire 1 6 i_clk $end
   $var wire 1 7 i_rst_n $end
   $var wire 32 8 i_addr [31:0] $end
   $var wire 32 9 i_data [31:0] $end
   $var wire 32 # o_addr [31:0] $end
   $var wire 5 $ o_one_position [4:0] $end
   $var wire 1 % o_zero_flag $end
   $scope module DUT $end
    $var wire 32 X SIZE_DATA [31:0] $end
    $var wire 32 Y SIZE_LOP [31:0] $end
    $var wire 1 6 i_clk $end
    $var wire 1 7 i_rst_n $end
    $var wire 32 8 i_addr [31:0] $end
    $var wire 32 9 i_data [31:0] $end
    $var wire 32 # o_addr [31:0] $end
    $var wire 5 $ o_one_position [4:0] $end
    $var wire 1 % o_zero_flag $end
    $var wire 32 & w_i_addr [31:0] $end
    $var wire 32 ' w_i_data [31:0] $end
    $var wire 32 & w_o_addr [31:0] $end
    $var wire 32 Z w_o_data [31:0] $end
    $var wire 5 : w_one_position [4:0] $end
    $var wire 1 ; w_zero_flag $end
    $scope module genblk1 $end
     $scope module DUT $end
      $var wire 32 ' i_data [31:0] $end
      $var wire 5 : o_pos_one [4:0] $end
      $var wire 1 ; o_zero_flag $end
      $var wire 4 < w_pos_one_0 [3:0] $end
      $var wire 1 = w_zero_flag_0 $end
      $var wire 4 > w_pos_one_1 [3:0] $end
      $var wire 1 ? w_zero_flag_1 $end
      $scope module LOPD_16bit_unit_0 $end
       $var wire 17 ( i_data [16:0] $end
       $var wire 4 < o_pos_one [3:0] $end
       $var wire 1 = o_zero_flag $end
       $var wire 3 @ w_pos_one_0 [2:0] $end
       $var wire 1 A w_zero_flag_0 $end
       $var wire 3 B w_pos_one_1 [2:0] $end
       $var wire 1 C w_zero_flag_1 $end
       $scope module LOPD_8bit_unit_0 $end
        $var wire 8 ) i_data [7:0] $end
        $var wire 3 @ o_pos_one [2:0] $end
        $var wire 1 A o_zero_flag $end
        $var wire 1 D w_zero_flag_0 $end
        $var wire 2 E w_pos_one_0 [1:0] $end
        $var wire 1 F w_zero_flag_1 $end
        $var wire 2 G w_pos_one_1 [1:0] $end
        $scope module LOPD_4bit_unit_0 $end
         $var wire 4 * i_data [3:0] $end
         $var wire 2 E o_pos_one [1:0] $end
         $var wire 1 D o_zero_flag $end
        $upscope $end
        $scope module LOPD_4bit_unit_1 $end
         $var wire 4 + i_data [3:0] $end
         $var wire 2 G o_pos_one [1:0] $end
         $var wire 1 F o_zero_flag $end
        $upscope $end
       $upscope $end
       $scope module LOPD_8bit_unit_1 $end
        $var wire 8 , i_data [7:0] $end
        $var wire 3 B o_pos_one [2:0] $end
        $var wire 1 C o_zero_flag $end
        $var wire 1 H w_zero_flag_0 $end
        $var wire 2 I w_pos_one_0 [1:0] $end
        $var wire 1 J w_zero_flag_1 $end
        $var wire 2 K w_pos_one_1 [1:0] $end
        $scope module LOPD_4bit_unit_0 $end
         $var wire 4 - i_data [3:0] $end
         $var wire 2 I o_pos_one [1:0] $end
         $var wire 1 H o_zero_flag $end
        $upscope $end
        $scope module LOPD_4bit_unit_1 $end
         $var wire 4 . i_data [3:0] $end
         $var wire 2 K o_pos_one [1:0] $end
         $var wire 1 J o_zero_flag $end
        $upscope $end
       $upscope $end
      $upscope $end
      $scope module LOPD_16bit_unit_1 $end
       $var wire 17 / i_data [16:0] $end
       $var wire 4 > o_pos_one [3:0] $end
       $var wire 1 ? o_zero_flag $end
       $var wire 3 L w_pos_one_0 [2:0] $end
       $var wire 1 M w_zero_flag_0 $end
       $var wire 3 N w_pos_one_1 [2:0] $end
       $var wire 1 O w_zero_flag_1 $end
       $scope module LOPD_8bit_unit_0 $end
        $var wire 8 0 i_data [7:0] $end
        $var wire 3 L o_pos_one [2:0] $end
        $var wire 1 M o_zero_flag $end
        $var wire 1 P w_zero_flag_0 $end
        $var wire 2 Q w_pos_one_0 [1:0] $end
        $var wire 1 R w_zero_flag_1 $end
        $var wire 2 S w_pos_one_1 [1:0] $end
        $scope module LOPD_4bit_unit_0 $end
         $var wire 4 1 i_data [3:0] $end
         $var wire 2 Q o_pos_one [1:0] $end
         $var wire 1 P o_zero_flag $end
        $upscope $end
        $scope module LOPD_4bit_unit_1 $end
         $var wire 4 2 i_data [3:0] $end
         $var wire 2 S o_pos_one [1:0] $end
         $var wire 1 R o_zero_flag $end
        $upscope $end
       $upscope $end
       $scope module LOPD_8bit_unit_1 $end
        $var wire 8 3 i_data [7:0] $end
        $var wire 3 N o_pos_one [2:0] $end
        $var wire 1 O o_zero_flag $end
        $var wire 1 T w_zero_flag_0 $end
        $var wire 2 U w_pos_one_0 [1:0] $end
        $var wire 1 V w_zero_flag_1 $end
        $var wire 2 W w_pos_one_1 [1:0] $end
        $scope module LOPD_4bit_unit_0 $end
         $var wire 4 4 i_data [3:0] $end
         $var wire 2 U o_pos_one [1:0] $end
         $var wire 1 T o_zero_flag $end
        $upscope $end
        $scope module LOPD_4bit_unit_1 $end
         $var wire 4 5 i_data [3:0] $end
         $var wire 2 W o_pos_one [1:0] $end
         $var wire 1 V o_zero_flag $end
        $upscope $end
       $upscope $end
      $upscope $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000 $
0%
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000 (
b00000000 )
b0000 *
b0000 +
b00000000 ,
b0000 -
b0000 .
b00000000000000000 /
b00000000 0
b0000 1
b0000 2
b00000000 3
b0000 4
b0000 5
06
07
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000 :
1;
b0000 <
1=
b0000 >
1?
b000 @
1A
b000 B
1C
1D
b00 E
1F
b00 G
1H
b00 I
1J
b00 K
b000 L
1M
b000 N
1O
1P
b00 Q
1R
b00 S
1T
b00 U
1V
b00 W
b00000000000000000000000000100000 X
b00000000000000000000000000000101 Y
b00000000000000000000000000000000 Z
#5000
16
#10000
06
#15000
16
#20000
06
#25000
16
#30000
06
#35000
16
#40000
06
#45000
16
#50000
06
#55000
16
#60000
06
#65000
16
#70000
06
#75000
16
#80000
06
#85000
16
#90000
06
#95000
16
#100000
06
17
#105000
1%
16
#110000
06
#115000
16
#120000
06
#125000
16
#130000
06
#135000
16
#140000
06
#145000
16
#150000
06
#155000
16
#160000
06
#165000
16
#170000
06
#175000
16
#180000
06
#185000
16
#190000
06
#195000
16
#200000
06
#205000
16
#206000
b00000000000000000000000000000011 8
b00000000000000000000000000011101 9
#210000
06
#215000
b00000000000000000000000000000011 &
b00000000000000000000000000011101 '
b00000000000011101 (
b00011101 )
b1101 *
b0001 +
16
b00100 :
0;
b0100 <
0=
b100 @
0A
0D
b11 E
0F
#216000
b00000000000000000000000000000010 9
#220000
06
#225000
b00000000000000000000000000000011 #
b00100 $
0%
b00000000000000000000000000000010 '
b00000000000000010 (
b00000010 )
b0010 *
b0000 +
16
b00001 :
b0001 <
b001 @
b01 E
1F
#230000
06
#235000
b00001 $
16
#240000
06
#245000
16
#250000
06
#255000
16
#260000
06
#265000
16
#270000
06
#275000
16
#280000
06
#285000
16
#290000
06
#295000
16
#300000
06
#305000
16
#310000
06
#315000
16
#316000
