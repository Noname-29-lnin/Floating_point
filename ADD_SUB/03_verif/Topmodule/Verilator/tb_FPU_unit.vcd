$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module tb_FPU_unit $end
   $var wire 32 O# NUM_OP [31:0] $end
   $var wire 1 G# i_clk $end
   $var wire 1 # i_rst_n $end
   $var wire 1 $ i_fpu_op [0:0] $end
   $var wire 32 % i_floating_a [31:0] $end
   $var wire 32 & i_floating_b [31:0] $end
   $var wire 32 D# o_floating_result [31:0] $end
   $scope module dut $end
    $var wire 32 O# NUM_OP [31:0] $end
    $var wire 1 $ i_fpu_op [0:0] $end
    $var wire 32 % i_floating_a [31:0] $end
    $var wire 32 & i_floating_b [31:0] $end
    $var wire 32 D# o_floating_result [31:0] $end
    $var wire 1 ' w_sign_a $end
    $var wire 1 ( w_sign_b $end
    $var wire 8 ) w_exponent_a [7:0] $end
    $var wire 8 * w_exponent_b [7:0] $end
    $var wire 24 + w_mantissa_a [23:0] $end
    $var wire 24 , w_mantissa_b [23:0] $end
    $var wire 1 a! w_sign_result $end
    $var wire 8 :" w_exponent_result [7:0] $end
    $var wire 24 E# w_mantissa_result [23:0] $end
    $var wire 1 9 w_EXPSWAP_compare $end
    $var wire 8 : w_EXPSWAP_max [7:0] $end
    $var wire 8 ; w_EXPSWAP_min [7:0] $end
    $var wire 8 < w_EXPSUB_diff_value [7:0] $end
    $var wire 1 = w_MAN_SWAP1_sign_max $end
    $var wire 1 > w_MAN_SWAP1_sign_min $end
    $var wire 24 ? w_MAN_SWAP1_max [23:0] $end
    $var wire 24 @ w_MAN_SWAP1_min [23:0] $end
    $var wire 28 z w_MAN_SHF_RIGHT_min [27:0] $end
    $var wire 28 A w_MAN_SHF_RIGHT_max [27:0] $end
    $var wire 1 b! w_MAN_COMP_28BIT_less $end
    $var wire 1 H# w_MAN_PRE_SWAP_BY_MAN_compara $end
    $var wire 1 a! w_MAN_PRE_SWAP_BY_MAN_sign_max $end
    $var wire 1 c! w_MAN_PRE_SWAP_BY_MAN_sign_min $end
    $var wire 28 d! w_MAN_PRE_SWAP_BY_MAN_max [27:0] $end
    $var wire 28 e! w_MAN_PRE_SWAP_BY_MAN_min [27:0] $end
    $var wire 28 ;" w_MAN_ALU_man [27:0] $end
    $var wire 1 <" w_MAN_ALU_overflow $end
    $var wire 5 =" w_LOPD_24BIT_one_position [4:0] $end
    $var wire 1 >" w_LOPD_24BIT_zero_flag $end
    $var wire 8 :" w_EXP_ADJUST_result [7:0] $end
    $var wire 28 F# w_NORMALIZATION_man [27:0] $end
    $var wire 24 E# w_ROUNDING_man [23:0] $end
    $scope module EXP_ADJUST_UNIT $end
     $var wire 32 P# SIZE_EXP [31:0] $end
     $var wire 32 P# SIZE_LOPD [31:0] $end
     $var wire 1 <" i_overflow $end
     $var wire 1 ?" i_underflow $end
     $var wire 1 >" i_zero_flag $end
     $var wire 8 @" i_lopd_value [7:0] $end
     $var wire 8 : i_exp_value [7:0] $end
     $var wire 8 :" o_exp_result [7:0] $end
     $var wire 8 A" w_exp_result [7:0] $end
     $var wire 1 B" w_i_carry $end
     $var wire 8 C" w_data_b [7:0] $end
     $scope module CLA_8BIT_UNIT $end
      $var wire 1 B" i_carry $end
      $var wire 8 : i_data_a [7:0] $end
      $var wire 8 C" i_data_b [7:0] $end
      $var wire 8 A" o_sum [7:0] $end
      $var wire 1 D" o_carry $end
      $var wire 2 E" w_P [1:0] $end
      $var wire 2 F" w_G [1:0] $end
      $var wire 1 G" w_C $end
      $scope module CLA_4BIT_UNIT_0 $end
       $var wire 4 Q a [3:0] $end
       $var wire 4 /# b [3:0] $end
       $var wire 1 B" cin $end
       $var wire 4 0# sum [3:0] $end
       $var wire 1 1# o_p $end
       $var wire 1 2# o_g $end
       $var wire 4 3# w_g [3:0] $end
       $var wire 4 4# w_p [3:0] $end
       $var wire 4 5# w_c [3:0] $end
      $upscope $end
      $scope module CLA_4BIT_UNIT_1 $end
       $var wire 4 Y a [3:0] $end
       $var wire 4 6# b [3:0] $end
       $var wire 1 G" cin $end
       $var wire 4 7# sum [3:0] $end
       $var wire 1 8# o_p $end
       $var wire 1 9# o_g $end
       $var wire 4 :# w_g [3:0] $end
       $var wire 4 ;# w_p [3:0] $end
       $var wire 4 <# w_c [3:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module EXP_SUB_UNIT $end
     $var wire 32 P# SIZE_EXP_SUB [31:0] $end
     $var wire 8 : i_data_a [7:0] $end
     $var wire 8 ; i_data_b [7:0] $end
     $var wire 8 < o_sub [7:0] $end
     $var wire 8 B w_data_b [7:0] $end
     $scope module CLA_8BIT_UNIT $end
      $var wire 1 Q# i_carry $end
      $var wire 8 : i_data_a [7:0] $end
      $var wire 8 B i_data_b [7:0] $end
      $var wire 8 < o_sum [7:0] $end
      $var wire 1 C o_carry $end
      $var wire 2 D w_P [1:0] $end
      $var wire 2 E w_G [1:0] $end
      $var wire 1 F w_C $end
      $scope module CLA_4BIT_UNIT_0 $end
       $var wire 4 Q a [3:0] $end
       $var wire 4 R b [3:0] $end
       $var wire 1 Q# cin $end
       $var wire 4 S sum [3:0] $end
       $var wire 1 T o_p $end
       $var wire 1 U o_g $end
       $var wire 4 V w_g [3:0] $end
       $var wire 4 W w_p [3:0] $end
       $var wire 4 X w_c [3:0] $end
      $upscope $end
      $scope module CLA_4BIT_UNIT_1 $end
       $var wire 4 Y a [3:0] $end
       $var wire 4 Z b [3:0] $end
       $var wire 1 F cin $end
       $var wire 4 [ sum [3:0] $end
       $var wire 1 \ o_p $end
       $var wire 1 ] o_g $end
       $var wire 4 ^ w_g [3:0] $end
       $var wire 4 _ w_p [3:0] $end
       $var wire 4 ` w_c [3:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module EXP_SWAP_UNIT $end
     $var wire 32 P# SIZE_DATA [31:0] $end
     $var wire 8 ) i_data_a [7:0] $end
     $var wire 8 * i_data_b [7:0] $end
     $var wire 1 9 o_compare $end
     $var wire 8 ; o_less_data [7:0] $end
     $var wire 8 : o_greater_data [7:0] $end
     $scope module COMP_LESS_UNIT $end
      $var wire 32 P# SIZE_DATA [31:0] $end
      $var wire 8 ) i_data_a [7:0] $end
      $var wire 8 * i_data_b [7:0] $end
      $var wire 1 9 o_less $end
      $var wire 1 G w_less_low $end
      $var wire 1 I# w_equal_low $end
      $var wire 1 H w_less_high $end
      $var wire 1 I w_equal_high $end
      $scope module u_low $end
       $var wire 4 - i_data_a [3:0] $end
       $var wire 4 . i_data_b [3:0] $end
       $var wire 1 G o_less $end
       $var wire 1 I# o_equal $end
       $var wire 1 a w_less_low $end
       $var wire 1 L# w_equal_low $end
       $var wire 1 b w_less_high $end
       $var wire 1 c w_equal_high $end
       $scope module u_high $end
        $var wire 2 / i_data_a [1:0] $end
        $var wire 2 0 i_data_b [1:0] $end
        $var wire 1 b o_less $end
        $var wire 1 c o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 1 i_data_a [1:0] $end
        $var wire 2 2 i_data_b [1:0] $end
        $var wire 1 a o_less $end
        $var wire 1 L# o_equal $end
       $upscope $end
      $upscope $end
      $scope module u_high $end
       $var wire 4 3 i_data_a [3:0] $end
       $var wire 4 4 i_data_b [3:0] $end
       $var wire 1 H o_less $end
       $var wire 1 I o_equal $end
       $var wire 1 d w_less_low $end
       $var wire 1 e w_equal_low $end
       $var wire 1 f w_less_high $end
       $var wire 1 g w_equal_high $end
       $scope module u_high $end
        $var wire 2 5 i_data_a [1:0] $end
        $var wire 2 6 i_data_b [1:0] $end
        $var wire 1 f o_less $end
        $var wire 1 g o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 7 i_data_a [1:0] $end
        $var wire 2 8 i_data_b [1:0] $end
        $var wire 1 d o_less $end
        $var wire 1 e o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module LOPD_24BIT_UNIT $end
     $var wire 32 R# SIZE_DATA [31:0] $end
     $var wire 32 S# SIZE_LOPD [31:0] $end
     $var wire 24 H" i_data [23:0] $end
     $var wire 5 =" o_one_position [4:0] $end
     $var wire 1 >" o_zero_flag $end
     $var wire 16 I" LOPD16_i_data [15:0] $end
     $var wire 4 J" LOPD16_o_pos_one [3:0] $end
     $var wire 1 K" LOPD16_o_zero_flag $end
     $var wire 8 L" LOPD8_i_data [7:0] $end
     $var wire 3 M" LOPD8_o_pos_one [2:0] $end
     $var wire 1 N" LOPD8_o_zero_flag $end
     $var wire 5 O" w_o_one_position [4:0] $end
     $var wire 8 P" w_sub [7:0] $end
     $scope module LOPD_16bit_UNIT_LSB $end
      $var wire 16 I" i_data [15:0] $end
      $var wire 4 J" o_pos_one [3:0] $end
      $var wire 1 K" o_zero_flag $end
      $var wire 3 Q" w_pos_one_0 [2:0] $end
      $var wire 1 R" w_zero_flag_0 $end
      $var wire 3 S" w_pos_one_1 [2:0] $end
      $var wire 1 T" w_zero_flag_1 $end
      $scope module LOPD_8bit_unit_0 $end
       $var wire 8 U" i_data [7:0] $end
       $var wire 3 Q" o_pos_one [2:0] $end
       $var wire 1 R" o_zero_flag $end
       $var wire 1 V" w_zero_flag_0 $end
       $var wire 2 W" w_pos_one_0 [1:0] $end
       $var wire 1 X" w_zero_flag_1 $end
       $var wire 2 Y" w_pos_one_1 [1:0] $end
       $scope module LOPD_4bit_unit_0 $end
        $var wire 4 Z" i_data [3:0] $end
        $var wire 2 W" o_pos_one [1:0] $end
        $var wire 1 V" o_zero_flag $end
       $upscope $end
       $scope module LOPD_4bit_unit_1 $end
        $var wire 4 [" i_data [3:0] $end
        $var wire 2 Y" o_pos_one [1:0] $end
        $var wire 1 X" o_zero_flag $end
       $upscope $end
      $upscope $end
      $scope module LOPD_8bit_unit_1 $end
       $var wire 8 \" i_data [7:0] $end
       $var wire 3 S" o_pos_one [2:0] $end
       $var wire 1 T" o_zero_flag $end
       $var wire 1 ]" w_zero_flag_0 $end
       $var wire 2 ^" w_pos_one_0 [1:0] $end
       $var wire 1 _" w_zero_flag_1 $end
       $var wire 2 `" w_pos_one_1 [1:0] $end
       $scope module LOPD_4bit_unit_0 $end
        $var wire 4 a" i_data [3:0] $end
        $var wire 2 ^" o_pos_one [1:0] $end
        $var wire 1 ]" o_zero_flag $end
       $upscope $end
       $scope module LOPD_4bit_unit_1 $end
        $var wire 4 b" i_data [3:0] $end
        $var wire 2 `" o_pos_one [1:0] $end
        $var wire 1 _" o_zero_flag $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module LOPD_8bit_UNIT_MSB $end
      $var wire 8 L" i_data [7:0] $end
      $var wire 3 M" o_pos_one [2:0] $end
      $var wire 1 N" o_zero_flag $end
      $var wire 1 c" w_zero_flag_0 $end
      $var wire 2 d" w_pos_one_0 [1:0] $end
      $var wire 1 e" w_zero_flag_1 $end
      $var wire 2 f" w_pos_one_1 [1:0] $end
      $scope module LOPD_4bit_unit_0 $end
       $var wire 4 g" i_data [3:0] $end
       $var wire 2 d" o_pos_one [1:0] $end
       $var wire 1 c" o_zero_flag $end
      $upscope $end
      $scope module LOPD_4bit_unit_1 $end
       $var wire 4 h" i_data [3:0] $end
       $var wire 2 f" o_pos_one [1:0] $end
       $var wire 1 e" o_zero_flag $end
      $upscope $end
     $upscope $end
     $scope module LOPD_SUB $end
      $var wire 1 Q# i_carry $end
      $var wire 8 T# i_data_a [7:0] $end
      $var wire 8 i" i_data_b [7:0] $end
      $var wire 8 P" o_sum [7:0] $end
      $var wire 1 j" o_carry $end
      $var wire 2 k" w_P [1:0] $end
      $var wire 2 l" w_G [1:0] $end
      $var wire 1 m" w_C $end
      $scope module CLA_4BIT_UNIT_0 $end
       $var wire 4 Z# a [3:0] $end
       $var wire 4 !# b [3:0] $end
       $var wire 1 Q# cin $end
       $var wire 4 "# sum [3:0] $end
       $var wire 1 ## o_p $end
       $var wire 1 $# o_g $end
       $var wire 4 %# w_g [3:0] $end
       $var wire 4 &# w_p [3:0] $end
       $var wire 4 '# w_c [3:0] $end
      $upscope $end
      $scope module CLA_4BIT_UNIT_1 $end
       $var wire 4 [# a [3:0] $end
       $var wire 4 (# b [3:0] $end
       $var wire 1 m" cin $end
       $var wire 4 )# sum [3:0] $end
       $var wire 1 *# o_p $end
       $var wire 1 +# o_g $end
       $var wire 4 ,# w_g [3:0] $end
       $var wire 4 -# w_p [3:0] $end
       $var wire 4 .# w_c [3:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module MAN_ALU_UNIT $end
     $var wire 32 O# NUM_OP [31:0] $end
     $var wire 32 U# SIZE_MAN [31:0] $end
     $var wire 1 $ i_fpu_op [0:0] $end
     $var wire 1 a! i_sign_max $end
     $var wire 1 c! i_sign_min $end
     $var wire 28 d! i_man_max [27:0] $end
     $var wire 28 e! i_man_min [27:0] $end
     $var wire 28 ;" o_man_alu [27:0] $end
     $var wire 1 <" o_overflow $end
     $var wire 1 f! w_i_carry $end
     $var wire 28 g! w_n_man_b [27:0] $end
     $var wire 28 h! w_i_man_b [27:0] $end
     $var wire 1 n" w_overflow $end
     $scope module ALU_SUB_UNIT $end
      $var wire 1 f! i_carry $end
      $var wire 28 d! i_data_a [27:0] $end
      $var wire 28 h! i_data_b [27:0] $end
      $var wire 28 ;" o_sum [27:0] $end
      $var wire 1 n" o_carry $end
      $var wire 8 o" w_c [7:0] $end
      $var wire 7 i! w_p [6:0] $end
      $var wire 7 j! w_g [6:0] $end
      $scope module CLA_4BIT_UNIT_0 $end
       $var wire 4 n! a [3:0] $end
       $var wire 4 o! b [3:0] $end
       $var wire 1 p" cin $end
       $var wire 4 q" sum [3:0] $end
       $var wire 1 p! o_p $end
       $var wire 1 q! o_g $end
       $var wire 4 r! w_g [3:0] $end
       $var wire 4 s! w_p [3:0] $end
       $var wire 4 r" w_c [3:0] $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[1] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 t! a [3:0] $end
        $var wire 4 u! b [3:0] $end
        $var wire 1 s" cin $end
        $var wire 4 Z" sum [3:0] $end
        $var wire 1 v! o_p $end
        $var wire 1 w! o_g $end
        $var wire 4 x! w_g [3:0] $end
        $var wire 4 y! w_p [3:0] $end
        $var wire 4 t" w_c [3:0] $end
       $upscope $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[2] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 z! a [3:0] $end
        $var wire 4 {! b [3:0] $end
        $var wire 1 u" cin $end
        $var wire 4 [" sum [3:0] $end
        $var wire 1 |! o_p $end
        $var wire 1 }! o_g $end
        $var wire 4 ~! w_g [3:0] $end
        $var wire 4 !" w_p [3:0] $end
        $var wire 4 v" w_c [3:0] $end
       $upscope $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[3] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 "" a [3:0] $end
        $var wire 4 #" b [3:0] $end
        $var wire 1 w" cin $end
        $var wire 4 a" sum [3:0] $end
        $var wire 1 $" o_p $end
        $var wire 1 %" o_g $end
        $var wire 4 &" w_g [3:0] $end
        $var wire 4 '" w_p [3:0] $end
        $var wire 4 x" w_c [3:0] $end
       $upscope $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[4] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 (" a [3:0] $end
        $var wire 4 )" b [3:0] $end
        $var wire 1 y" cin $end
        $var wire 4 b" sum [3:0] $end
        $var wire 1 *" o_p $end
        $var wire 1 +" o_g $end
        $var wire 4 ," w_g [3:0] $end
        $var wire 4 -" w_p [3:0] $end
        $var wire 4 z" w_c [3:0] $end
       $upscope $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[5] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 ." a [3:0] $end
        $var wire 4 /" b [3:0] $end
        $var wire 1 {" cin $end
        $var wire 4 g" sum [3:0] $end
        $var wire 1 0" o_p $end
        $var wire 1 1" o_g $end
        $var wire 4 2" w_g [3:0] $end
        $var wire 4 3" w_p [3:0] $end
        $var wire 4 |" w_c [3:0] $end
       $upscope $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[6] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 4" a [3:0] $end
        $var wire 4 5" b [3:0] $end
        $var wire 1 }" cin $end
        $var wire 4 h" sum [3:0] $end
        $var wire 1 6" o_p $end
        $var wire 1 7" o_g $end
        $var wire 4 8" w_g [3:0] $end
        $var wire 4 9" w_p [3:0] $end
        $var wire 4 ~" w_c [3:0] $end
       $upscope $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module MAN_COMP_28BIT_UNIT $end
     $var wire 32 U# SIZE_DATA [31:0] $end
     $var wire 28 z i_data_a [27:0] $end
     $var wire 28 A i_data_b [27:0] $end
     $var wire 1 b! o_less $end
     $var wire 1 J# o_equal $end
     $var wire 32 V# NUM_BLOCK [31:0] $end
     $var wire 7 :! w_less [6:0] $end
     $var wire 7 ;! w_equal [6:0] $end
     $var wire 8 k! less_chain [7:0] $end
     $var wire 8 K# equal_chain [7:0] $end
     $scope module GEN_COMP_4BIT[0] $end
      $scope module u_comp4 $end
       $var wire 4 #! i_data_a [3:0] $end
       $var wire 4 \# i_data_b [3:0] $end
       $var wire 1 M# o_less $end
       $var wire 1 N# o_equal $end
       $var wire 1 ]# w_less_low $end
       $var wire 1 $! w_equal_low $end
       $var wire 1 ]# w_less_high $end
       $var wire 1 %! w_equal_high $end
       $scope module u_high $end
        $var wire 2 &! i_data_a [1:0] $end
        $var wire 2 ^# i_data_b [1:0] $end
        $var wire 1 ]# o_less $end
        $var wire 1 %! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 '! i_data_a [1:0] $end
        $var wire 2 ^# i_data_b [1:0] $end
        $var wire 1 ]# o_less $end
        $var wire 1 $! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[1] $end
      $scope module u_comp4 $end
       $var wire 4 (! i_data_a [3:0] $end
       $var wire 4 h i_data_b [3:0] $end
       $var wire 1 =! o_less $end
       $var wire 1 >! o_equal $end
       $var wire 1 ?! w_less_low $end
       $var wire 1 @! w_equal_low $end
       $var wire 1 A! w_less_high $end
       $var wire 1 B! w_equal_high $end
       $scope module u_high $end
        $var wire 2 )! i_data_a [1:0] $end
        $var wire 2 i i_data_b [1:0] $end
        $var wire 1 A! o_less $end
        $var wire 1 B! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 *! i_data_a [1:0] $end
        $var wire 2 j i_data_b [1:0] $end
        $var wire 1 ?! o_less $end
        $var wire 1 @! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[2] $end
      $scope module u_comp4 $end
       $var wire 4 +! i_data_a [3:0] $end
       $var wire 4 k i_data_b [3:0] $end
       $var wire 1 C! o_less $end
       $var wire 1 D! o_equal $end
       $var wire 1 E! w_less_low $end
       $var wire 1 F! w_equal_low $end
       $var wire 1 G! w_less_high $end
       $var wire 1 H! w_equal_high $end
       $scope module u_high $end
        $var wire 2 ,! i_data_a [1:0] $end
        $var wire 2 l i_data_b [1:0] $end
        $var wire 1 G! o_less $end
        $var wire 1 H! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 -! i_data_a [1:0] $end
        $var wire 2 m i_data_b [1:0] $end
        $var wire 1 E! o_less $end
        $var wire 1 F! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[3] $end
      $scope module u_comp4 $end
       $var wire 4 .! i_data_a [3:0] $end
       $var wire 4 n i_data_b [3:0] $end
       $var wire 1 I! o_less $end
       $var wire 1 J! o_equal $end
       $var wire 1 K! w_less_low $end
       $var wire 1 L! w_equal_low $end
       $var wire 1 M! w_less_high $end
       $var wire 1 N! w_equal_high $end
       $scope module u_high $end
        $var wire 2 /! i_data_a [1:0] $end
        $var wire 2 o i_data_b [1:0] $end
        $var wire 1 M! o_less $end
        $var wire 1 N! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 0! i_data_a [1:0] $end
        $var wire 2 p i_data_b [1:0] $end
        $var wire 1 K! o_less $end
        $var wire 1 L! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[4] $end
      $scope module u_comp4 $end
       $var wire 4 1! i_data_a [3:0] $end
       $var wire 4 q i_data_b [3:0] $end
       $var wire 1 O! o_less $end
       $var wire 1 P! o_equal $end
       $var wire 1 Q! w_less_low $end
       $var wire 1 R! w_equal_low $end
       $var wire 1 S! w_less_high $end
       $var wire 1 T! w_equal_high $end
       $scope module u_high $end
        $var wire 2 2! i_data_a [1:0] $end
        $var wire 2 r i_data_b [1:0] $end
        $var wire 1 S! o_less $end
        $var wire 1 T! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 3! i_data_a [1:0] $end
        $var wire 2 s i_data_b [1:0] $end
        $var wire 1 Q! o_less $end
        $var wire 1 R! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[5] $end
      $scope module u_comp4 $end
       $var wire 4 4! i_data_a [3:0] $end
       $var wire 4 t i_data_b [3:0] $end
       $var wire 1 U! o_less $end
       $var wire 1 V! o_equal $end
       $var wire 1 W! w_less_low $end
       $var wire 1 X! w_equal_low $end
       $var wire 1 Y! w_less_high $end
       $var wire 1 Z! w_equal_high $end
       $scope module u_high $end
        $var wire 2 5! i_data_a [1:0] $end
        $var wire 2 u i_data_b [1:0] $end
        $var wire 1 Y! o_less $end
        $var wire 1 Z! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 6! i_data_a [1:0] $end
        $var wire 2 v i_data_b [1:0] $end
        $var wire 1 W! o_less $end
        $var wire 1 X! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[6] $end
      $scope module u_comp4 $end
       $var wire 4 7! i_data_a [3:0] $end
       $var wire 4 w i_data_b [3:0] $end
       $var wire 1 [! o_less $end
       $var wire 1 \! o_equal $end
       $var wire 1 ]! w_less_low $end
       $var wire 1 ^! w_equal_low $end
       $var wire 1 _! w_less_high $end
       $var wire 1 `! w_equal_high $end
       $scope module u_high $end
        $var wire 2 8! i_data_a [1:0] $end
        $var wire 2 x i_data_b [1:0] $end
        $var wire 1 _! o_less $end
        $var wire 1 `! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 9! i_data_a [1:0] $end
        $var wire 2 y i_data_b [1:0] $end
        $var wire 1 ]! o_less $end
        $var wire 1 ^! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module MAN_PRE_SWAP_BY_EXPONENT_UNIT $end
     $var wire 32 R# SIZE_MAN [31:0] $end
     $var wire 1 ' i_sign_a $end
     $var wire 1 ( i_sign_b $end
     $var wire 24 + i_man_a [23:0] $end
     $var wire 24 , i_man_b [23:0] $end
     $var wire 1 9 i_compare $end
     $var wire 1 = o_sign_max $end
     $var wire 1 > o_sign_min $end
     $var wire 24 ? o_man_max [23:0] $end
     $var wire 24 @ o_man_min [23:0] $end
     $var wire 25 J w_a [24:0] $end
     $var wire 25 K w_b [24:0] $end
     $var wire 25 L w_max [24:0] $end
     $var wire 25 M w_min [24:0] $end
    $upscope $end
    $scope module MAN_PRE_SWAP_BY_MAN_UNIT $end
     $var wire 32 U# SIZE_MAN [31:0] $end
     $var wire 1 = i_sign_a $end
     $var wire 1 > i_sign_b $end
     $var wire 28 A i_man_a [27:0] $end
     $var wire 28 z i_man_b [27:0] $end
     $var wire 1 H# i_compare $end
     $var wire 1 a! o_sign_max $end
     $var wire 1 c! o_sign_min $end
     $var wire 28 d! o_man_max [27:0] $end
     $var wire 28 e! o_man_min [27:0] $end
     $var wire 29 N w_a [28:0] $end
     $var wire 29 <! w_b [28:0] $end
     $var wire 29 l! w_max [28:0] $end
     $var wire 29 m! w_min [28:0] $end
    $upscope $end
    $scope module NORMALIZATION_UNIT $end
     $var wire 32 S# SIZE_LOPD [31:0] $end
     $var wire 32 U# SIZE_DATA [31:0] $end
     $var wire 1 <" i_overflow $end
     $var wire 1 >" i_zero_flag $end
     $var wire 5 =" i_one_position [4:0] $end
     $var wire 28 ;" i_mantissa [27:0] $end
     $var wire 28 F# o_mantissa [27:0] $end
     $var wire 28 =# w_shift_left [27:0] $end
     $scope module SHF_left_28bit_unit $end
      $var wire 32 U# SIZE_DATA [31:0] $end
      $var wire 32 S# SIZE_SHIFT [31:0] $end
      $var wire 5 =" i_shift_number [4:0] $end
      $var wire 28 ;" i_data [27:0] $end
      $var wire 28 =# o_data [27:0] $end
      $var wire 28 ># stage[0] [27:0] $end
      $var wire 28 ?# stage[1] [27:0] $end
      $var wire 28 @# stage[2] [27:0] $end
      $var wire 28 A# stage[3] [27:0] $end
      $var wire 28 B# stage[4] [27:0] $end
      $var wire 28 C# stage[5] [27:0] $end
      $scope module GEN_SHIFT[0] $end
       $var wire 32 O# SHIFT_AMT [31:0] $end
      $upscope $end
      $scope module GEN_SHIFT[1] $end
       $var wire 32 W# SHIFT_AMT [31:0] $end
      $upscope $end
      $scope module GEN_SHIFT[2] $end
       $var wire 32 X# SHIFT_AMT [31:0] $end
      $upscope $end
      $scope module GEN_SHIFT[3] $end
       $var wire 32 P# SHIFT_AMT [31:0] $end
      $upscope $end
      $scope module GEN_SHIFT[4] $end
       $var wire 32 Y# SHIFT_AMT [31:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module ROUNDING_UNIT $end
     $var wire 32 U# SIZE_MAN [31:0] $end
     $var wire 32 R# SIZE_MAN_RESULT [31:0] $end
     $var wire 28 F# i_man [27:0] $end
     $var wire 24 E# o_man_result [23:0] $end
     $var wire 24 E# w_man_temp [23:0] $end
    $upscope $end
    $scope module SHF_RIGHT_28BIT_UNIT $end
     $var wire 32 U# SIZE_DATA [31:0] $end
     $var wire 32 S# SIZE_SHIFT [31:0] $end
     $var wire 5 O i_shift_number [4:0] $end
     $var wire 28 P i_data [27:0] $end
     $var wire 28 z o_data [27:0] $end
     $var wire 28 { stage[0] [27:0] $end
     $var wire 28 | stage[1] [27:0] $end
     $var wire 28 } stage[2] [27:0] $end
     $var wire 28 ~ stage[3] [27:0] $end
     $var wire 28 !! stage[4] [27:0] $end
     $var wire 28 "! stage[5] [27:0] $end
     $scope module GEN_SHIFT[0] $end
      $var wire 32 O# SHIFT_AMT [31:0] $end
     $upscope $end
     $scope module GEN_SHIFT[1] $end
      $var wire 32 W# SHIFT_AMT [31:0] $end
     $upscope $end
     $scope module GEN_SHIFT[2] $end
      $var wire 32 X# SHIFT_AMT [31:0] $end
     $upscope $end
     $scope module GEN_SHIFT[3] $end
      $var wire 32 P# SHIFT_AMT [31:0] $end
     $upscope $end
     $scope module GEN_SHIFT[4] $end
      $var wire 32 Y# SHIFT_AMT [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
0'
0(
b00000000 )
b00000000 *
b100000000000000000000000 +
b100000000000000000000000 ,
b0000 -
b0000 .
b00 /
b00 0
b00 1
b00 2
b0000 3
b0000 4
b00 5
b00 6
b00 7
b00 8
09
b00000000 :
b00000000 ;
b00000000 <
0=
0>
b100000000000000000000000 ?
b100000000000000000000000 @
b1000000000000000000000000000 A
b11111111 B
1C
b11 D
b00 E
1F
0G
0H
1I
b0100000000000000000000000 J
b0100000000000000000000000 K
b0100000000000000000000000 L
b0100000000000000000000000 M
b01000000000000000000000000000 N
b00000 O
b1000000000000000000000000000 P
b0000 Q
b1111 R
b0000 S
1T
0U
b0000 V
b1111 W
b1111 X
b0000 Y
b1111 Z
b0000 [
1\
0]
b0000 ^
b1111 _
b1111 `
0a
0b
1c
0d
1e
0f
1g
b0000 h
b00 i
b00 j
b0000 k
b00 l
b00 m
b0000 n
b00 o
b00 p
b0000 q
b00 r
b00 s
b0000 t
b00 u
b00 v
b1000 w
b10 x
b00 y
b1000000000000000000000000000 z
b1000000000000000000000000000 {
b1000000000000000000000000000 |
b1000000000000000000000000000 }
b1000000000000000000000000000 ~
b1000000000000000000000000000 !!
b1000000000000000000000000000 "!
b0000 #!
1$!
1%!
b00 &!
b00 '!
b0000 (!
b00 )!
b00 *!
b0000 +!
b00 ,!
b00 -!
b0000 .!
b00 /!
b00 0!
b0000 1!
b00 2!
b00 3!
b0000 4!
b00 5!
b00 6!
b1000 7!
b10 8!
b00 9!
b0000000 :!
b1111111 ;!
b01000000000000000000000000000 <!
0=!
1>!
0?!
1@!
0A!
1B!
0C!
1D!
0E!
1F!
0G!
1H!
0I!
1J!
0K!
1L!
0M!
1N!
0O!
1P!
0Q!
1R!
0S!
1T!
0U!
1V!
0W!
1X!
0Y!
1Z!
0[!
1\!
0]!
1^!
0_!
1`!
0a!
0b!
0c!
b1000000000000000000000000000 d!
b1000000000000000000000000000 e!
0f!
b0111111111111111111111111111 g!
b1000000000000000000000000000 h!
b0000000 i!
b1000000 j!
b00000000 k!
b01000000000000000000000000000 l!
b01000000000000000000000000000 m!
b0000 n!
b0000 o!
0p!
0q!
b0000 r!
b0000 s!
b0000 t!
b0000 u!
0v!
0w!
b0000 x!
b0000 y!
b0000 z!
b0000 {!
0|!
0}!
b0000 ~!
b0000 !"
b0000 ""
b0000 #"
0$"
0%"
b0000 &"
b0000 '"
b0000 ("
b0000 )"
0*"
0+"
b0000 ,"
b0000 -"
b0000 ."
b0000 /"
00"
01"
b0000 2"
b0000 3"
b1000 4"
b1000 5"
06"
17"
b1000 8"
b0000 9"
b00000000 :"
b0000000000000000000000000000 ;"
1<"
b10111 ="
1>"
0?"
b00010111 @"
b00000001 A"
0B"
b00000001 C"
0D"
b00 E"
b00 F"
0G"
b000000000000000000000000 H"
b0000000000000000 I"
b0000 J"
1K"
b00000000 L"
b000 M"
1N"
b00000 O"
b00010111 P"
b000 Q"
1R"
b000 S"
1T"
b00000000 U"
1V"
b00 W"
1X"
b00 Y"
b0000 Z"
b0000 ["
b00000000 \"
1]"
b00 ^"
1_"
b00 `"
b0000 a"
b0000 b"
1c"
b00 d"
1e"
b00 f"
b0000 g"
b0000 h"
b11111111 i"
1j"
b00 k"
b11 l"
1m"
1n"
b10000000 o"
0p"
b0000 q"
b0000 r"
0s"
b0000 t"
0u"
b0000 v"
0w"
b0000 x"
0y"
b0000 z"
0{"
b0000 |"
0}"
b0000 ~"
b1111 !#
b0111 "#
0##
1$#
b0111 %#
b1000 &#
b1111 '#
b1111 (#
b0001 )#
0*#
1+#
b0001 ,#
b1110 -#
b1111 .#
b0001 /#
b0001 0#
01#
02#
b0000 3#
b0001 4#
b0000 5#
b0000 6#
b0000 7#
08#
09#
b0000 :#
b0000 ;#
b0000 <#
b0000000000000000000000000000 =#
b0000000000000000000000000000 >#
b0000000000000000000000000000 ?#
b0000000000000000000000000000 @#
b0000000000000000000000000000 A#
b0000000000000000000000000000 B#
b0000000000000000000000000000 C#
b00000000000000000000000000000000 D#
b000000000000000000000000 E#
b0000000000000000000000000000 F#
0G#
0H#
1I#
1J#
b11111111 K#
1L#
0M#
1N#
b00000000000000000000000000000001 O#
b00000000000000000000000000001000 P#
1Q#
b00000000000000000000000000011000 R#
b00000000000000000000000000000101 S#
b00010111 T#
b00000000000000000000000000011100 U#
b00000000000000000000000000000111 V#
b00000000000000000000000000000010 W#
b00000000000000000000000000000100 X#
b00000000000000000000000000010000 Y#
b0111 Z#
b0001 [#
b0000 \#
0]#
b00 ^#
#5000
1G#
#10000
0G#
#15000
1G#
#20000
1#
0G#
#25000
b01000000101100000000000000000000 %
b01000000000011001100110011001101 &
b10000001 )
b10000000 *
b101100000000000000000000 +
b100011001100110011001101 ,
b0001 -
b01 1
b1000 3
b1000 4
b10 5
b10 6
b10000001 :
b10000000 ;
b00000001 <
b101100000000000000000000 ?
b100011001100110011001101 @
b1011000000000000000000000000 A
b01111111 B
b10 D
b01 E
b0101100000000000000000000 J
b0100011001100110011001101 K
b0101100000000000000000000 L
b0100011001100110011001101 M
b01011000000000000000000000000 N
b00001 O
b1000110011001100110011010000 P
b0001 Q
b0001 S
0T
1U
b0001 V
b1110 W
b1000 Y
b0111 Z
b1011 w
b11 y
b0100011001100110011001101000 z
b1000110011001100110011010000 {
b0100011001100110011001101000 |
b0100011001100110011001101000 }
b0100011001100110011001101000 ~
b0100011001100110011001101000 !!
b0100011001100110011001101000 "!
b1000 #!
0%!
b10 &!
b0110 (!
b01 )!
b10 *!
b0110 +!
b01 ,!
b10 -!
b0110 .!
b01 /!
b10 0!
b0110 1!
b01 2!
b10 3!
b0110 4!
b01 5!
b10 6!
b0100 7!
b01 8!
b1000000 :!
b0000000 ;!
b00100011001100110011001101000 <!
0>!
0@!
0B!
0D!
0F!
0H!
0J!
0L!
0N!
0P!
0R!
0T!
0V!
0X!
0Z!
1[!
0\!
1]!
0^!
1_!
0`!
b1011000000000000000000000000 d!
b0100011001100110011001101000 e!
b1011100110011001100110010111 g!
b0100011001100110011001101000 h!
b1000000 i!
b0000000 j!
b01000000 k!
b01011000000000000000000000000 l!
b00100011001100110011001101000 m!
b1000 o!
b1000 s!
b0110 u!
b0110 y!
b0110 {!
b0110 !"
b0110 #"
b0110 '"
b0110 )"
b0110 -"
b0110 /"
b0110 3"
b1011 4"
b0100 5"
16"
07"
b0000 8"
b1111 9"
b10000001 :"
b1111011001100110011001101000 ;"
0<"
b00000 ="
0>"
1?"
b00000000 @"
b10000001 A"
b00000000 C"
b111101100110011001100110 H"
b0110011001100110 I"
b1110 J"
0K"
b11110110 L"
b111 M"
0N"
b10111 O"
b00000000 P"
b110 Q"
0R"
b110 S"
0T"
b01100110 U"
0V"
b10 W"
0X"
b10 Y"
b0110 Z"
b0110 ["
b01100110 \"
0]"
b10 ^"
0_"
b10 `"
b0110 a"
b0110 b"
0c"
b10 d"
0e"
b11 f"
b0110 g"
b1111 h"
b11101000 i"
b11 k"
b00 l"
0n"
b00000000 o"
b1000 q"
b1000 !#
b0000 "#
1##
0$#
b0000 %#
b1111 &#
b1110 (#
b0000 )#
1*#
0+#
b0000 ,#
b1111 -#
b0000 /#
b1000 7#
b1000 ;#
b1111011001100110011001101000 =#
b1111011001100110011001101000 >#
b1111011001100110011001101000 ?#
b1111011001100110011001101000 @#
b1111011001100110011001101000 A#
b1111011001100110011001101000 B#
b1111011001100110011001101000 C#
b01000000111101100110011001100110 D#
b111101100110011001100110 E#
b1111011001100110011001101000 F#
1G#
0I#
0J#
b10000000 K#
0L#
0N#
#30000
0G#
#35000
1G#
#40000
0G#
#45000
1$
1f!
b1011100110011001100110010111 h!
b0000000 i!
b1000000 j!
b0111 o!
b0111 s!
b1001 u!
b1001 y!
b1001 {!
b1001 !"
b1001 #"
b1001 '"
b1001 )"
b1001 -"
b1001 /"
b1001 3"
b1011 5"
06"
17"
b1011 8"
b0000 9"
b10000000 :"
b0110100110011001100110011000 ;"
b00001 ="
0?"
b00000001 @"
b10000000 A"
1B"
b11111110 C"
1D"
b01 E"
b10 F"
1G"
b011010011001100110011001 H"
b1001100110011001 I"
b1111 J"
b01101001 L"
b110 M"
b10110 O"
b00000001 P"
b111 Q"
b111 S"
b10011001 U"
b11 W"
b11 Y"
b1001 Z"
b1001 ["
b10011001 \"
b11 ^"
b11 `"
b1001 a"
b1001 b"
b11 d"
b10 f"
b1001 g"
b0110 h"
b11101001 i"
b10 k"
b01 l"
1n"
b10000001 o"
1p"
b1111 r"
b0110 ~"
b1001 !#
b0001 "#
0##
1$#
b0001 %#
b1110 &#
b1110 /#
b0000 0#
11#
b1111 4#
b1111 5#
b1111 6#
19#
b1000 :#
b0111 ;#
b1111 <#
b1101001100110011001100110000 =#
b0110100110011001100110011000 >#
b1101001100110011001100110000 ?#
b1101001100110011001100110000 @#
b1101001100110011001100110000 A#
b1101001100110011001100110000 B#
b1101001100110011001100110000 C#
b01000000010100110011001100110011 D#
b110100110011001100110011 E#
b1101001100110011001100110000 F#
1G#
#50000
0G#
#55000
1G#
#60000
0G#
#65000
0$
b11000000000011001100110011001101 &
1(
1>
b1100011001100110011001101 K
b1100011001100110011001101 M
b10100011001100110011001101000 <!
1c!
b10100011001100110011001101000 m!
1G#
#70000
0G#
#75000
1G#
#80000
0G#
#85000
1$
0f!
b0100011001100110011001101000 h!
b1000000 i!
b0000000 j!
b1000 o!
b1000 s!
b0110 u!
b0110 y!
b0110 {!
b0110 !"
b0110 #"
b0110 '"
b0110 )"
b0110 -"
b0110 /"
b0110 3"
b0100 5"
16"
07"
b0000 8"
b1111 9"
b10000001 :"
b1111011001100110011001101000 ;"
b00000 ="
1?"
b00000000 @"
b10000001 A"
0B"
b00000000 C"
0D"
b00 E"
b00 F"
0G"
b111101100110011001100110 H"
b0110011001100110 I"
b1110 J"
b11110110 L"
b111 M"
b10111 O"
b00000000 P"
b110 Q"
b110 S"
b01100110 U"
b10 W"
b10 Y"
b0110 Z"
b0110 ["
b01100110 \"
b10 ^"
b10 `"
b0110 a"
b0110 b"
b10 d"
b11 f"
b0110 g"
b1111 h"
b11101000 i"
b11 k"
b00 l"
0n"
b00000000 o"
0p"
b0000 r"
b0000 ~"
b1000 !#
b0000 "#
1##
0$#
b0000 %#
b1111 &#
b0000 /#
b0001 0#
01#
b0001 4#
b0000 5#
b0000 6#
09#
b0000 :#
b1000 ;#
b0000 <#
b1111011001100110011001101000 =#
b1111011001100110011001101000 >#
b1111011001100110011001101000 ?#
b1111011001100110011001101000 @#
b1111011001100110011001101000 A#
b1111011001100110011001101000 B#
b1111011001100110011001101000 C#
b01000000111101100110011001100110 D#
b111101100110011001100110 E#
b1111011001100110011001101000 F#
1G#
#90000
0G#
#95000
1G#
#100000
0G#
#105000
0$
b11000000101100000000000000000000 %
1'
1=
b1101100000000000000000000 J
b1101100000000000000000000 L
b11011000000000000000000000000 N
1a!
b11011000000000000000000000000 l!
b11000000111101100110011001100110 D#
1G#
#110000
0G#
#115000
1G#
#120000
0G#
#125000
1$
1f!
b1011100110011001100110010111 h!
b0000000 i!
b1000000 j!
b0111 o!
b0111 s!
b1001 u!
b1001 y!
b1001 {!
b1001 !"
b1001 #"
b1001 '"
b1001 )"
b1001 -"
b1001 /"
b1001 3"
b1011 5"
06"
17"
b1011 8"
b0000 9"
b10000000 :"
b0110100110011001100110011000 ;"
b00001 ="
0?"
b00000001 @"
b10000000 A"
1B"
b11111110 C"
1D"
b01 E"
b10 F"
1G"
b011010011001100110011001 H"
b1001100110011001 I"
b1111 J"
b01101001 L"
b110 M"
b10110 O"
b00000001 P"
b111 Q"
b111 S"
b10011001 U"
b11 W"
b11 Y"
b1001 Z"
b1001 ["
b10011001 \"
b11 ^"
b11 `"
b1001 a"
b1001 b"
b11 d"
b10 f"
b1001 g"
b0110 h"
b11101001 i"
b10 k"
b01 l"
1n"
b10000001 o"
1p"
b1111 r"
b0110 ~"
b1001 !#
b0001 "#
0##
1$#
b0001 %#
b1110 &#
b1110 /#
b0000 0#
11#
b1111 4#
b1111 5#
b1111 6#
19#
b1000 :#
b0111 ;#
b1111 <#
b1101001100110011001100110000 =#
b0110100110011001100110011000 >#
b1101001100110011001100110000 ?#
b1101001100110011001100110000 @#
b1101001100110011001100110000 A#
b1101001100110011001100110000 B#
b1101001100110011001100110000 C#
b11000000010100110011001100110011 D#
b110100110011001100110011 E#
b1101001100110011001100110000 F#
1G#
#130000
0G#
#135000
1G#
#140000
0G#
#145000
1G#
#150000
0G#
#155000
1G#
