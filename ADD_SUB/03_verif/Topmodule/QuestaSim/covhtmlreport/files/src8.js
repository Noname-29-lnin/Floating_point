var g_data = {"name":"/home/noname/Documents/project_tiny/Floating_point/Temp_Code/02_rtl/CLA_8bit.sv","src":"// module CLA_8bit(\n//     input  logic        i_carry,\n//     input  logic [7:0]  i_data_a,\n//     input  logic [7:0]  i_data_b,\n//     output logic [7:0]  o_sum,\n//     output logic        o_carry\n// );\n\n//     logic [7:0] w_G;\n//     logic [7:0] w_P;\n//     logic [8:0] w_C;\n\n//     assign w_G = i_data_a & i_data_b;\n//     assign w_P = i_data_a ^ i_data_b;\n\n//     assign w_C[0] = i_carry;\n//     assign w_C[1] = w_G[0] | (w_P[0] & w_C[0]);\n//     assign w_C[2] = w_G[1] | (w_P[1] & w_G[0]) | (w_P[1] & w_P[0] & w_C[0]);\n//     assign w_C[3] = w_G[2] | (w_P[2] & w_G[1]) | (w_P[2] & w_P[1] & w_G[0]) | (w_P[2] & w_P[1] & w_P[0] & w_C[0]);\n//     assign w_C[4] = w_G[3] | (w_P[3] & w_G[2]) | (w_P[3] & w_P[2] & w_G[1]) | (w_P[3] & w_P[2] & w_P[1] & w_G[0]) \n//                   | (w_P[3] & w_P[2] & w_P[1] & w_P[0] & w_C[0]);\n//     assign w_C[5] = w_G[4] | (w_P[4] & w_G[3]) | (w_P[4] & w_P[3] & w_G[2]) | (w_P[4] & w_P[3] & w_P[2] & w_G[1])\n//                   | (w_P[4] & w_P[3] & w_P[2] & w_P[1] & w_G[0])\n//                   | (w_P[4] & w_P[3] & w_P[2] & w_P[1] & w_P[0] & w_C[0]);\n//     assign w_C[6] = w_G[5] | (w_P[5] & w_G[4]) | (w_P[5] & w_P[4] & w_G[3]) | (w_P[5] & w_P[4] & w_P[3] & w_G[2])\n//                   | (w_P[5] & w_P[4] & w_P[3] & w_P[2] & w_G[1])\n//                   | (w_P[5] & w_P[4] & w_P[3] & w_P[2] & w_P[1] & w_G[0])\n//                   | (w_P[5] & w_P[4] & w_P[3] & w_P[2] & w_P[1] & w_P[0] & w_C[0]);\n//     assign w_C[7] = w_G[6] | (w_P[6] & w_G[5]) | (w_P[6] & w_P[5] & w_G[4]) | (w_P[6] & w_P[5] & w_P[4] & w_G[3])\n//                   | (w_P[6] & w_P[5] & w_P[4] & w_P[3] & w_G[2])\n//                   | (w_P[6] & w_P[5] & w_P[4] & w_P[3] & w_P[2] & w_G[1])\n//                   | (w_P[6] & w_P[5] & w_P[4] & w_P[3] & w_P[2] & w_P[1] & w_G[0])\n//                   | (w_P[6] & w_P[5] & w_P[4] & w_P[3] & w_P[2] & w_P[1] & w_P[0] & w_C[0]);\n//     assign w_C[8] = w_G[7] | (w_P[7] & w_G[6]) | (w_P[7] & w_P[6] & w_G[5]) | (w_P[7] & w_P[6] & w_P[5] & w_G[4])\n//                   | (w_P[7] & w_P[6] & w_P[5] & w_P[4] & w_G[3])\n//                   | (w_P[7] & w_P[6] & w_P[5] & w_P[4] & w_P[3] & w_G[2])\n//                   | (w_P[7] & w_P[6] & w_P[5] & w_P[4] & w_P[3] & w_P[2] & w_G[1])\n//                   | (w_P[7] & w_P[6] & w_P[5] & w_P[4] & w_P[3] & w_P[2] & w_P[1] & w_G[0])\n//                   | (w_P[7] & w_P[6] & w_P[5] & w_P[4] & w_P[3] & w_P[2] & w_P[1] & w_P[0] & w_C[0]);\n\n//     assign o_sum   = w_P ^ w_C[7:0];\n//     assign o_carry = w_C[8];\n\n// endmodule\nmodule CLA_8bit(\n    input  logic        i_carry,\n    input  logic [7:0]  i_data_a,\n    input  logic [7:0]  i_data_b,\n    output logic [7:0]  o_sum,\n    output logic        o_carry\n);\n\n    logic [1:0] w_P, w_G;\n    logic w_C;\n\n    // Lower 4-bit CLA (bits [3:0])\n    CLA_4bit CLA_4BIT_UNIT_0 (\n        .a      (i_data_a[3:0]),\n        .b      (i_data_b[3:0]),\n        .cin    (i_carry),\n        .sum    (o_sum[3:0]),\n        .o_p    (w_P[0]),\n        .o_g    (w_G[0])\n    );\n\n    // Upper 4-bit CLA (bits [7:4])\n    CLA_4bit CLA_4BIT_UNIT_1 (\n        .a      (i_data_a[7:4]),\n        .b      (i_data_b[7:4]),\n        .cin    (w_C),\n        .sum    (o_sum[7:4]),\n        .o_p    (w_P[1]),\n        .o_g    (w_G[1])\n    );\n\n    always_comb begin\n        w_C = w_G[0] | (w_P[0] & i_carry);\n    end\n\n    assign o_carry = w_G[1] | (w_P[1] & (w_G[0] | (w_P[0] & i_carry)));\n\nendmodule\n","lang":"verilog"};
processSrcData(g_data);