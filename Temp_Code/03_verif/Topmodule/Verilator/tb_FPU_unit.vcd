$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 3 1# SHF_left.i_shift_number [2:0] $end
  $var wire 8 2# SHF_left.i_data [7:0] $end
  $var wire 8 3# SHF_left.o_data [7:0] $end
  $var wire 3 4# SHF_right.i_shift_number [2:0] $end
  $var wire 8 5# SHF_right.i_data [7:0] $end
  $var wire 8 6# SHF_right.o_data [7:0] $end
  $scope module SHF_left $end
   $var wire 32 F# SIZE_DATA [31:0] $end
   $var wire 32 G# SIZE_SHIFT [31:0] $end
   $var wire 3 1# i_shift_number [2:0] $end
   $var wire 8 2# i_data [7:0] $end
   $var wire 8 3# o_data [7:0] $end
   $var wire 8 7# stage_data[0] [7:0] $end
   $var wire 8 8# stage_data[1] [7:0] $end
   $var wire 8 9# stage_data[2] [7:0] $end
   $var wire 8 :# stage_data[3] [7:0] $end
   $scope module GEN_SHIFT_STAGE[0] $end
    $var wire 32 H# SHIFT_VAL [31:0] $end
   $upscope $end
   $scope module GEN_SHIFT_STAGE[1] $end
    $var wire 32 I# SHIFT_VAL [31:0] $end
   $upscope $end
   $scope module GEN_SHIFT_STAGE[2] $end
    $var wire 32 J# SHIFT_VAL [31:0] $end
   $upscope $end
  $upscope $end
  $scope module SHF_right $end
   $var wire 32 F# SIZE_DATA [31:0] $end
   $var wire 32 G# SIZE_SHIFT [31:0] $end
   $var wire 3 4# i_shift_number [2:0] $end
   $var wire 8 5# i_data [7:0] $end
   $var wire 8 6# o_data [7:0] $end
   $var wire 8 ;# stage_data[0] [7:0] $end
   $var wire 8 <# stage_data[1] [7:0] $end
   $var wire 8 =# stage_data[2] [7:0] $end
   $var wire 8 ># stage_data[3] [7:0] $end
   $scope module GEN_SHIFT_STAGE[0] $end
    $var wire 32 H# SHIFT_VAL [31:0] $end
   $upscope $end
   $scope module GEN_SHIFT_STAGE[1] $end
    $var wire 32 I# SHIFT_VAL [31:0] $end
   $upscope $end
   $scope module GEN_SHIFT_STAGE[2] $end
    $var wire 32 J# SHIFT_VAL [31:0] $end
   $upscope $end
  $upscope $end
  $scope module tb_FPU_unit $end
   $var wire 32 H# NUM_OP [31:0] $end
   $var wire 1 ?# i_clk $end
   $var wire 1 # i_rst_n $end
   $var wire 1 $ i_fpu_op [0:0] $end
   $var wire 32 % i_floating_a [31:0] $end
   $var wire 32 & i_floating_b [31:0] $end
   $var wire 32 @# o_floating_result [31:0] $end
   $scope module dut $end
    $var wire 32 H# NUM_OP [31:0] $end
    $var wire 1 $ i_fpu_op [0:0] $end
    $var wire 32 % i_floating_a [31:0] $end
    $var wire 32 & i_floating_b [31:0] $end
    $var wire 32 @# o_floating_result [31:0] $end
    $var wire 1 ' w_sign_a $end
    $var wire 1 ( w_sign_b $end
    $var wire 8 ) w_exponent_a [7:0] $end
    $var wire 8 * w_exponent_b [7:0] $end
    $var wire 24 + w_mantissa_a [23:0] $end
    $var wire 24 , w_mantissa_b [23:0] $end
    $var wire 1 b! w_sign_result $end
    $var wire 8 ;" w_exponent_result [7:0] $end
    $var wire 24 (# w_mantissa_result [23:0] $end
    $var wire 1 B w_EXPSWAP_compare $end
    $var wire 8 C w_EXPSWAP_max [7:0] $end
    $var wire 8 D w_EXPSWAP_min [7:0] $end
    $var wire 8 E w_EXPSUB_diff_value [7:0] $end
    $var wire 1 F w_MAN_SWAP1_sign_max $end
    $var wire 1 G w_MAN_SWAP1_sign_min $end
    $var wire 24 H w_MAN_SWAP1_max [23:0] $end
    $var wire 24 I w_MAN_SWAP1_min [23:0] $end
    $var wire 28 z w_MAN_SHF_RIGHT_min [27:0] $end
    $var wire 28 J w_MAN_SHF_RIGHT_max [27:0] $end
    $var wire 1 c! w_MAN_COMP_28BIT_less $end
    $var wire 1 A# w_MAN_PRE_SWAP_BY_MAN_compara $end
    $var wire 1 b! w_MAN_PRE_SWAP_BY_MAN_sign_max $end
    $var wire 1 d! w_MAN_PRE_SWAP_BY_MAN_sign_min $end
    $var wire 28 e! w_MAN_PRE_SWAP_BY_MAN_max [27:0] $end
    $var wire 28 f! w_MAN_PRE_SWAP_BY_MAN_min [27:0] $end
    $var wire 28 <" w_MAN_ALU_man [27:0] $end
    $var wire 1 =" w_MAN_ALU_overflow $end
    $var wire 5 >" w_LOPD_24BIT_one_position [4:0] $end
    $var wire 1 ?" w_LOPD_24BIT_zero_flag $end
    $var wire 8 ;" w_EXP_ADJUST_result [7:0] $end
    $var wire 28 )# w_NORMALIZATION_man [27:0] $end
    $scope module EXP_ADJUST_UNIT $end
     $var wire 32 F# SIZE_EXP [31:0] $end
     $var wire 32 F# SIZE_LOPD [31:0] $end
     $var wire 1 =" i_overflow $end
     $var wire 1 @" i_underflow $end
     $var wire 1 ?" i_zero_flag $end
     $var wire 8 A" i_lopd_value [7:0] $end
     $var wire 8 C i_exp_value [7:0] $end
     $var wire 8 ;" o_exp_result [7:0] $end
     $var wire 8 B" w_exp_result [7:0] $end
     $var wire 8 C" w_underflow_exp [7:0] $end
     $var wire 8 D" w_overflow_exp [7:0] $end
     $var wire 32 K# SIZE_PADDING [31:0] $end
     $var wire 8 A" w_lopd_value [7:0] $end
     $scope module CLA_8BIT_UNIT $end
      $var wire 1 =" i_carry $end
      $var wire 8 C i_data_a [7:0] $end
      $var wire 8 D" i_data_b [7:0] $end
      $var wire 8 B" o_sum [7:0] $end
      $var wire 1 E" o_carry $end
      $var wire 2 F" w_P [1:0] $end
      $var wire 2 G" w_G [1:0] $end
      $var wire 1 H" w_C $end
      $scope module CLA_4BIT_UNIT_0 $end
       $var wire 4 K a [3:0] $end
       $var wire 4 I" b [3:0] $end
       $var wire 1 =" cin $end
       $var wire 4 J" sum [3:0] $end
       $var wire 1 K" o_p $end
       $var wire 1 L" o_g $end
       $var wire 4 M" w_g [3:0] $end
       $var wire 4 N" w_p [3:0] $end
       $var wire 4 O" w_c [3:0] $end
      $upscope $end
      $scope module CLA_4BIT_UNIT_1 $end
       $var wire 4 L a [3:0] $end
       $var wire 4 P" b [3:0] $end
       $var wire 1 H" cin $end
       $var wire 4 Q" sum [3:0] $end
       $var wire 1 R" o_p $end
       $var wire 1 S" o_g $end
       $var wire 4 T" w_g [3:0] $end
       $var wire 4 U" w_p [3:0] $end
       $var wire 4 V" w_c [3:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module EXP_SUB_UNIT $end
     $var wire 32 F# SIZE_EXP_SUB [31:0] $end
     $var wire 8 C i_data_a [7:0] $end
     $var wire 8 D i_data_b [7:0] $end
     $var wire 8 E o_sub [7:0] $end
     $var wire 8 M w_data_b [7:0] $end
     $scope module CLA_8BIT_UNIT $end
      $var wire 1 L# i_carry $end
      $var wire 8 C i_data_a [7:0] $end
      $var wire 8 M i_data_b [7:0] $end
      $var wire 8 E o_sum [7:0] $end
      $var wire 1 N o_carry $end
      $var wire 2 O w_P [1:0] $end
      $var wire 2 P w_G [1:0] $end
      $var wire 1 Q w_C $end
      $scope module CLA_4BIT_UNIT_0 $end
       $var wire 4 K a [3:0] $end
       $var wire 4 R b [3:0] $end
       $var wire 1 L# cin $end
       $var wire 4 S sum [3:0] $end
       $var wire 1 T o_p $end
       $var wire 1 U o_g $end
       $var wire 4 V w_g [3:0] $end
       $var wire 4 W w_p [3:0] $end
       $var wire 4 X w_c [3:0] $end
      $upscope $end
      $scope module CLA_4BIT_UNIT_1 $end
       $var wire 4 L a [3:0] $end
       $var wire 4 Y b [3:0] $end
       $var wire 1 Q cin $end
       $var wire 4 Z sum [3:0] $end
       $var wire 1 [ o_p $end
       $var wire 1 \ o_g $end
       $var wire 4 ] w_g [3:0] $end
       $var wire 4 ^ w_p [3:0] $end
       $var wire 4 _ w_c [3:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module EXP_SWAP_UNIT $end
     $var wire 32 F# SIZE_DATA [31:0] $end
     $var wire 8 ) i_data_a [7:0] $end
     $var wire 8 * i_data_b [7:0] $end
     $var wire 1 B o_compare $end
     $var wire 8 D o_less_data [7:0] $end
     $var wire 8 C o_greater_data [7:0] $end
     $scope module COMP_LESS_UNIT $end
      $var wire 32 F# SIZE_DATA [31:0] $end
      $var wire 8 ) i_data_a [7:0] $end
      $var wire 8 * i_data_b [7:0] $end
      $var wire 1 B o_less $end
      $var wire 1 - w_less_low $end
      $var wire 1 . w_equal_low $end
      $var wire 1 B# w_less_high $end
      $var wire 1 C# w_equal_high $end
      $scope module u_high $end
       $var wire 4 / i_data_a [3:0] $end
       $var wire 4 0 i_data_b [3:0] $end
       $var wire 1 B# o_less $end
       $var wire 1 C# o_equal $end
       $var wire 1 1 w_less_low $end
       $var wire 1 2 w_equal_low $end
       $var wire 1 3 w_less_high $end
       $var wire 1 ` w_equal_high $end
       $scope module u_high $end
        $var wire 2 4 i_data_a [1:0] $end
        $var wire 2 5 i_data_b [1:0] $end
        $var wire 1 3 o_less $end
        $var wire 1 ` o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 6 i_data_a [1:0] $end
        $var wire 2 7 i_data_b [1:0] $end
        $var wire 1 1 o_less $end
        $var wire 1 2 o_equal $end
       $upscope $end
      $upscope $end
      $scope module u_low $end
       $var wire 4 8 i_data_a [3:0] $end
       $var wire 4 9 i_data_b [3:0] $end
       $var wire 1 - o_less $end
       $var wire 1 . o_equal $end
       $var wire 1 : w_less_low $end
       $var wire 1 ; w_equal_low $end
       $var wire 1 < w_less_high $end
       $var wire 1 = w_equal_high $end
       $scope module u_high $end
        $var wire 2 > i_data_a [1:0] $end
        $var wire 2 ? i_data_b [1:0] $end
        $var wire 1 < o_less $end
        $var wire 1 = o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 @ i_data_a [1:0] $end
        $var wire 2 A i_data_b [1:0] $end
        $var wire 1 : o_less $end
        $var wire 1 ; o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module LOPD_24BIT_UNIT $end
     $var wire 32 M# SIZE_DATA [31:0] $end
     $var wire 32 N# SIZE_LOPD [31:0] $end
     $var wire 24 W" i_data [23:0] $end
     $var wire 5 >" o_one_position [4:0] $end
     $var wire 1 ?" o_zero_flag $end
     $var wire 16 X" LOPD16_i_data [15:0] $end
     $var wire 4 Y" LOPD16_o_pos_one [3:0] $end
     $var wire 1 Z" LOPD16_o_zero_flag $end
     $var wire 8 [" LOPD8_i_data [7:0] $end
     $var wire 3 \" LOPD8_o_pos_one [2:0] $end
     $var wire 1 ]" LOPD8_o_zero_flag $end
     $scope module LOPD_16bit_UNIT_LSB $end
      $var wire 16 X" i_data [15:0] $end
      $var wire 4 Y" o_pos_one [3:0] $end
      $var wire 1 Z" o_zero_flag $end
      $var wire 3 ^" w_pos_one_0 [2:0] $end
      $var wire 1 _" w_zero_flag_0 $end
      $var wire 3 `" w_pos_one_1 [2:0] $end
      $var wire 1 a" w_zero_flag_1 $end
      $scope module LOPD_8bit_unit_0 $end
       $var wire 8 b" i_data [7:0] $end
       $var wire 3 ^" o_pos_one [2:0] $end
       $var wire 1 _" o_zero_flag $end
       $var wire 1 c" w_zero_flag_0 $end
       $var wire 2 d" w_pos_one_0 [1:0] $end
       $var wire 1 e" w_zero_flag_1 $end
       $var wire 2 f" w_pos_one_1 [1:0] $end
       $scope module LOPD_4bit_unit_0 $end
        $var wire 4 g" i_data [3:0] $end
        $var wire 2 d" o_pos_one [1:0] $end
        $var wire 1 c" o_zero_flag $end
       $upscope $end
       $scope module LOPD_4bit_unit_1 $end
        $var wire 4 h" i_data [3:0] $end
        $var wire 2 f" o_pos_one [1:0] $end
        $var wire 1 e" o_zero_flag $end
       $upscope $end
      $upscope $end
      $scope module LOPD_8bit_unit_1 $end
       $var wire 8 i" i_data [7:0] $end
       $var wire 3 `" o_pos_one [2:0] $end
       $var wire 1 a" o_zero_flag $end
       $var wire 1 j" w_zero_flag_0 $end
       $var wire 2 k" w_pos_one_0 [1:0] $end
       $var wire 1 l" w_zero_flag_1 $end
       $var wire 2 m" w_pos_one_1 [1:0] $end
       $scope module LOPD_4bit_unit_0 $end
        $var wire 4 n" i_data [3:0] $end
        $var wire 2 k" o_pos_one [1:0] $end
        $var wire 1 j" o_zero_flag $end
       $upscope $end
       $scope module LOPD_4bit_unit_1 $end
        $var wire 4 o" i_data [3:0] $end
        $var wire 2 m" o_pos_one [1:0] $end
        $var wire 1 l" o_zero_flag $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module LOPD_8bit_UNIT_MSB $end
      $var wire 8 [" i_data [7:0] $end
      $var wire 3 \" o_pos_one [2:0] $end
      $var wire 1 ]" o_zero_flag $end
      $var wire 1 p" w_zero_flag_0 $end
      $var wire 2 q" w_pos_one_0 [1:0] $end
      $var wire 1 r" w_zero_flag_1 $end
      $var wire 2 s" w_pos_one_1 [1:0] $end
      $scope module LOPD_4bit_unit_0 $end
       $var wire 4 t" i_data [3:0] $end
       $var wire 2 q" o_pos_one [1:0] $end
       $var wire 1 p" o_zero_flag $end
      $upscope $end
      $scope module LOPD_4bit_unit_1 $end
       $var wire 4 u" i_data [3:0] $end
       $var wire 2 s" o_pos_one [1:0] $end
       $var wire 1 r" o_zero_flag $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module MAN_ALU_UNIT $end
     $var wire 32 H# NUM_OP [31:0] $end
     $var wire 32 O# SIZE_MAN [31:0] $end
     $var wire 1 $ i_fpu_op [0:0] $end
     $var wire 1 b! i_sign_max $end
     $var wire 1 d! i_sign_min $end
     $var wire 28 e! i_man_max [27:0] $end
     $var wire 28 f! i_man_min [27:0] $end
     $var wire 28 <" o_man_alu [27:0] $end
     $var wire 1 =" o_overflow $end
     $var wire 1 g! w_i_carry $end
     $var wire 28 h! w_n_man_b [27:0] $end
     $var wire 28 i! w_i_man_b [27:0] $end
     $scope module ALU_SUB_UNIT $end
      $var wire 1 g! i_carry $end
      $var wire 28 e! i_data_a [27:0] $end
      $var wire 28 i! i_data_b [27:0] $end
      $var wire 28 <" o_sum [27:0] $end
      $var wire 1 =" o_carry $end
      $var wire 8 v" w_c [7:0] $end
      $var wire 7 j! w_p [6:0] $end
      $var wire 7 k! w_g [6:0] $end
      $scope module CLA_4BIT_UNIT_0 $end
       $var wire 4 l! a [3:0] $end
       $var wire 4 m! b [3:0] $end
       $var wire 1 w" cin $end
       $var wire 4 x" sum [3:0] $end
       $var wire 1 n! o_p $end
       $var wire 1 o! o_g $end
       $var wire 4 p! w_g [3:0] $end
       $var wire 4 q! w_p [3:0] $end
       $var wire 4 y" w_c [3:0] $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[1] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 r! a [3:0] $end
        $var wire 4 s! b [3:0] $end
        $var wire 1 z" cin $end
        $var wire 4 g" sum [3:0] $end
        $var wire 1 t! o_p $end
        $var wire 1 u! o_g $end
        $var wire 4 v! w_g [3:0] $end
        $var wire 4 w! w_p [3:0] $end
        $var wire 4 {" w_c [3:0] $end
       $upscope $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[2] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 x! a [3:0] $end
        $var wire 4 y! b [3:0] $end
        $var wire 1 |" cin $end
        $var wire 4 h" sum [3:0] $end
        $var wire 1 z! o_p $end
        $var wire 1 {! o_g $end
        $var wire 4 |! w_g [3:0] $end
        $var wire 4 }! w_p [3:0] $end
        $var wire 4 }" w_c [3:0] $end
       $upscope $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[3] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 ~! a [3:0] $end
        $var wire 4 !" b [3:0] $end
        $var wire 1 ~" cin $end
        $var wire 4 n" sum [3:0] $end
        $var wire 1 "" o_p $end
        $var wire 1 #" o_g $end
        $var wire 4 $" w_g [3:0] $end
        $var wire 4 %" w_p [3:0] $end
        $var wire 4 !# w_c [3:0] $end
       $upscope $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[4] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 &" a [3:0] $end
        $var wire 4 '" b [3:0] $end
        $var wire 1 "# cin $end
        $var wire 4 o" sum [3:0] $end
        $var wire 1 (" o_p $end
        $var wire 1 )" o_g $end
        $var wire 4 *" w_g [3:0] $end
        $var wire 4 +" w_p [3:0] $end
        $var wire 4 ## w_c [3:0] $end
       $upscope $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[5] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 ," a [3:0] $end
        $var wire 4 -" b [3:0] $end
        $var wire 1 $# cin $end
        $var wire 4 t" sum [3:0] $end
        $var wire 1 ." o_p $end
        $var wire 1 /" o_g $end
        $var wire 4 0" w_g [3:0] $end
        $var wire 4 1" w_p [3:0] $end
        $var wire 4 %# w_c [3:0] $end
       $upscope $end
      $upscope $end
      $scope module CLA_BLOCK_GEN[6] $end
       $scope module CLA_4BIT_UNIT_1 $end
        $var wire 4 2" a [3:0] $end
        $var wire 4 3" b [3:0] $end
        $var wire 1 &# cin $end
        $var wire 4 u" sum [3:0] $end
        $var wire 1 4" o_p $end
        $var wire 1 5" o_g $end
        $var wire 4 6" w_g [3:0] $end
        $var wire 4 7" w_p [3:0] $end
        $var wire 4 '# w_c [3:0] $end
       $upscope $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module MAN_COMP_28BIT_UNIT $end
     $var wire 32 O# SIZE_DATA [31:0] $end
     $var wire 28 z i_data_a [27:0] $end
     $var wire 28 J i_data_b [27:0] $end
     $var wire 1 c! o_less $end
     $var wire 1 D# o_equal $end
     $var wire 32 P# NUM_BLOCK [31:0] $end
     $var wire 7 Y! w_less [6:0] $end
     $var wire 7 Z! w_equal [6:0] $end
     $var wire 8 8" less_chain [7:0] $end
     $var wire 8 E# equal_chain [7:0] $end
     $scope module GEN_COMP_4BIT[0] $end
      $scope module u_comp4 $end
       $var wire 4 { i_data_a [3:0] $end
       $var wire 4 Q# i_data_b [3:0] $end
       $var wire 1 R# o_less $end
       $var wire 1 | o_equal $end
       $var wire 1 R# w_less_low $end
       $var wire 1 } w_equal_low $end
       $var wire 1 R# w_less_high $end
       $var wire 1 ~ w_equal_high $end
       $scope module u_high $end
        $var wire 2 !! i_data_a [1:0] $end
        $var wire 2 S# i_data_b [1:0] $end
        $var wire 1 R# o_less $end
        $var wire 1 ~ o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 "! i_data_a [1:0] $end
        $var wire 2 S# i_data_b [1:0] $end
        $var wire 1 R# o_less $end
        $var wire 1 } o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[1] $end
      $scope module u_comp4 $end
       $var wire 4 #! i_data_a [3:0] $end
       $var wire 4 a i_data_b [3:0] $end
       $var wire 1 $! o_less $end
       $var wire 1 %! o_equal $end
       $var wire 1 &! w_less_low $end
       $var wire 1 '! w_equal_low $end
       $var wire 1 (! w_less_high $end
       $var wire 1 [! w_equal_high $end
       $scope module u_high $end
        $var wire 2 )! i_data_a [1:0] $end
        $var wire 2 b i_data_b [1:0] $end
        $var wire 1 (! o_less $end
        $var wire 1 [! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 *! i_data_a [1:0] $end
        $var wire 2 c i_data_b [1:0] $end
        $var wire 1 &! o_less $end
        $var wire 1 '! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[2] $end
      $scope module u_comp4 $end
       $var wire 4 +! i_data_a [3:0] $end
       $var wire 4 d i_data_b [3:0] $end
       $var wire 1 ,! o_less $end
       $var wire 1 -! o_equal $end
       $var wire 1 .! w_less_low $end
       $var wire 1 /! w_equal_low $end
       $var wire 1 0! w_less_high $end
       $var wire 1 \! w_equal_high $end
       $scope module u_high $end
        $var wire 2 1! i_data_a [1:0] $end
        $var wire 2 e i_data_b [1:0] $end
        $var wire 1 0! o_less $end
        $var wire 1 \! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 2! i_data_a [1:0] $end
        $var wire 2 f i_data_b [1:0] $end
        $var wire 1 .! o_less $end
        $var wire 1 /! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[3] $end
      $scope module u_comp4 $end
       $var wire 4 3! i_data_a [3:0] $end
       $var wire 4 g i_data_b [3:0] $end
       $var wire 1 4! o_less $end
       $var wire 1 5! o_equal $end
       $var wire 1 6! w_less_low $end
       $var wire 1 7! w_equal_low $end
       $var wire 1 8! w_less_high $end
       $var wire 1 ]! w_equal_high $end
       $scope module u_high $end
        $var wire 2 9! i_data_a [1:0] $end
        $var wire 2 h i_data_b [1:0] $end
        $var wire 1 8! o_less $end
        $var wire 1 ]! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 :! i_data_a [1:0] $end
        $var wire 2 i i_data_b [1:0] $end
        $var wire 1 6! o_less $end
        $var wire 1 7! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[4] $end
      $scope module u_comp4 $end
       $var wire 4 ;! i_data_a [3:0] $end
       $var wire 4 j i_data_b [3:0] $end
       $var wire 1 <! o_less $end
       $var wire 1 =! o_equal $end
       $var wire 1 >! w_less_low $end
       $var wire 1 ?! w_equal_low $end
       $var wire 1 @! w_less_high $end
       $var wire 1 ^! w_equal_high $end
       $scope module u_high $end
        $var wire 2 A! i_data_a [1:0] $end
        $var wire 2 k i_data_b [1:0] $end
        $var wire 1 @! o_less $end
        $var wire 1 ^! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 B! i_data_a [1:0] $end
        $var wire 2 l i_data_b [1:0] $end
        $var wire 1 >! o_less $end
        $var wire 1 ?! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[5] $end
      $scope module u_comp4 $end
       $var wire 4 C! i_data_a [3:0] $end
       $var wire 4 m i_data_b [3:0] $end
       $var wire 1 D! o_less $end
       $var wire 1 E! o_equal $end
       $var wire 1 F! w_less_low $end
       $var wire 1 G! w_equal_low $end
       $var wire 1 H! w_less_high $end
       $var wire 1 _! w_equal_high $end
       $scope module u_high $end
        $var wire 2 I! i_data_a [1:0] $end
        $var wire 2 n i_data_b [1:0] $end
        $var wire 1 H! o_less $end
        $var wire 1 _! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 J! i_data_a [1:0] $end
        $var wire 2 o i_data_b [1:0] $end
        $var wire 1 F! o_less $end
        $var wire 1 G! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module GEN_COMP_4BIT[6] $end
      $scope module u_comp4 $end
       $var wire 4 K! i_data_a [3:0] $end
       $var wire 4 p i_data_b [3:0] $end
       $var wire 1 L! o_less $end
       $var wire 1 M! o_equal $end
       $var wire 1 N! w_less_low $end
       $var wire 1 O! w_equal_low $end
       $var wire 1 P! w_less_high $end
       $var wire 1 `! w_equal_high $end
       $scope module u_high $end
        $var wire 2 Q! i_data_a [1:0] $end
        $var wire 2 q i_data_b [1:0] $end
        $var wire 1 P! o_less $end
        $var wire 1 `! o_equal $end
       $upscope $end
       $scope module u_low $end
        $var wire 2 R! i_data_a [1:0] $end
        $var wire 2 r i_data_b [1:0] $end
        $var wire 1 N! o_less $end
        $var wire 1 O! o_equal $end
       $upscope $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module MAN_PRE_SWAP_BY_EXPONENT_UNIT $end
     $var wire 32 M# SIZE_MAN [31:0] $end
     $var wire 1 ' i_sign_a $end
     $var wire 1 ( i_sign_b $end
     $var wire 24 + i_man_a [23:0] $end
     $var wire 24 , i_man_b [23:0] $end
     $var wire 1 B i_compare $end
     $var wire 1 F o_sign_max $end
     $var wire 1 G o_sign_min $end
     $var wire 24 H o_man_max [23:0] $end
     $var wire 24 I o_man_min [23:0] $end
     $var wire 25 s w_a [24:0] $end
     $var wire 25 t w_b [24:0] $end
     $var wire 25 u w_max [24:0] $end
     $var wire 25 v w_min [24:0] $end
    $upscope $end
    $scope module MAN_PRE_SWAP_BY_MAN_UNIT $end
     $var wire 32 O# SIZE_MAN [31:0] $end
     $var wire 1 F i_sign_a $end
     $var wire 1 G i_sign_b $end
     $var wire 28 J i_man_a [27:0] $end
     $var wire 28 z i_man_b [27:0] $end
     $var wire 1 A# i_compare $end
     $var wire 1 b! o_sign_max $end
     $var wire 1 d! o_sign_min $end
     $var wire 28 e! o_man_max [27:0] $end
     $var wire 28 f! o_man_min [27:0] $end
     $var wire 29 w w_a [28:0] $end
     $var wire 29 a! w_b [28:0] $end
     $var wire 29 9" w_max [28:0] $end
     $var wire 29 :" w_min [28:0] $end
    $upscope $end
    $scope module NORMALIZATION_UNIT $end
     $var wire 32 N# SIZE_LOPD [31:0] $end
     $var wire 32 O# SIZE_DATA [31:0] $end
     $var wire 1 =" i_overflow $end
     $var wire 1 ?" i_zero_flag $end
     $var wire 5 >" i_one_position [4:0] $end
     $var wire 28 <" i_mantissa [27:0] $end
     $var wire 28 )# o_mantissa [27:0] $end
     $var wire 28 *# w_shift_left [27:0] $end
     $scope module SHF_left_28bit_unit $end
      $var wire 32 O# SIZE_DATA [31:0] $end
      $var wire 32 N# SIZE_SHIFT [31:0] $end
      $var wire 5 >" i_shift_number [4:0] $end
      $var wire 28 <" i_data [27:0] $end
      $var wire 28 *# o_data [27:0] $end
      $var wire 28 +# stage[0] [27:0] $end
      $var wire 28 ,# stage[1] [27:0] $end
      $var wire 28 -# stage[2] [27:0] $end
      $var wire 28 .# stage[3] [27:0] $end
      $var wire 28 /# stage[4] [27:0] $end
      $var wire 28 0# stage[5] [27:0] $end
      $scope module GEN_SHIFT[0] $end
       $var wire 32 H# SHIFT_AMT [31:0] $end
      $upscope $end
      $scope module GEN_SHIFT[1] $end
       $var wire 32 I# SHIFT_AMT [31:0] $end
      $upscope $end
      $scope module GEN_SHIFT[2] $end
       $var wire 32 J# SHIFT_AMT [31:0] $end
      $upscope $end
      $scope module GEN_SHIFT[3] $end
       $var wire 32 F# SHIFT_AMT [31:0] $end
      $upscope $end
      $scope module GEN_SHIFT[4] $end
       $var wire 32 T# SHIFT_AMT [31:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module SHF_RIGHT_28BIT_UNIT $end
     $var wire 32 O# SIZE_DATA [31:0] $end
     $var wire 32 N# SIZE_SHIFT [31:0] $end
     $var wire 5 x i_shift_number [4:0] $end
     $var wire 28 y i_data [27:0] $end
     $var wire 28 z o_data [27:0] $end
     $var wire 28 S! stage[0] [27:0] $end
     $var wire 28 T! stage[1] [27:0] $end
     $var wire 28 U! stage[2] [27:0] $end
     $var wire 28 V! stage[3] [27:0] $end
     $var wire 28 W! stage[4] [27:0] $end
     $var wire 28 X! stage[5] [27:0] $end
     $scope module GEN_SHIFT[0] $end
      $var wire 32 H# SHIFT_AMT [31:0] $end
     $upscope $end
     $scope module GEN_SHIFT[1] $end
      $var wire 32 I# SHIFT_AMT [31:0] $end
     $upscope $end
     $scope module GEN_SHIFT[2] $end
      $var wire 32 J# SHIFT_AMT [31:0] $end
     $upscope $end
     $scope module GEN_SHIFT[3] $end
      $var wire 32 F# SHIFT_AMT [31:0] $end
     $upscope $end
     $scope module GEN_SHIFT[4] $end
      $var wire 32 T# SHIFT_AMT [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
0'
0(
b00000000 )
b00000000 *
b100000000000000000000000 +
b100000000000000000000000 ,
0-
1.
b0000 /
b0000 0
01
12
03
b00 4
b00 5
b00 6
b00 7
b0000 8
b0000 9
0:
1;
0<
1=
b00 >
b00 ?
b00 @
b00 A
0B
b00000000 C
b00000000 D
b00000000 E
0F
0G
b100000000000000000000000 H
b100000000000000000000000 I
b1000000000000000000000000000 J
b0000 K
b0000 L
b11111111 M
1N
b11 O
b00 P
1Q
b1111 R
b0000 S
1T
0U
b0000 V
b1111 W
b1111 X
b1111 Y
b0000 Z
1[
0\
b0000 ]
b1111 ^
b1111 _
1`
b0000 a
b00 b
b00 c
b0000 d
b00 e
b00 f
b0000 g
b00 h
b00 i
b0000 j
b00 k
b00 l
b0000 m
b00 n
b00 o
b1000 p
b10 q
b00 r
b0100000000000000000000000 s
b0100000000000000000000000 t
b0100000000000000000000000 u
b0100000000000000000000000 v
b01000000000000000000000000000 w
b00000 x
b1000000000000000000000000000 y
b1000000000000000000000000000 z
b0000 {
1|
1}
1~
b00 !!
b00 "!
b0000 #!
0$!
1%!
0&!
1'!
0(!
b00 )!
b00 *!
b0000 +!
0,!
1-!
0.!
1/!
00!
b00 1!
b00 2!
b0000 3!
04!
15!
06!
17!
08!
b00 9!
b00 :!
b0000 ;!
0<!
1=!
0>!
1?!
0@!
b00 A!
b00 B!
b0000 C!
0D!
1E!
0F!
1G!
0H!
b00 I!
b00 J!
b1000 K!
0L!
1M!
0N!
1O!
0P!
b10 Q!
b00 R!
b1000000000000000000000000000 S!
b1000000000000000000000000000 T!
b1000000000000000000000000000 U!
b1000000000000000000000000000 V!
b1000000000000000000000000000 W!
b1000000000000000000000000000 X!
b0000000 Y!
b1111111 Z!
1[!
1\!
1]!
1^!
1_!
1`!
b01000000000000000000000000000 a!
0b!
0c!
0d!
b1000000000000000000000000000 e!
b1000000000000000000000000000 f!
1g!
b0111111111111111111111111111 h!
b0111111111111111111111111111 i!
b1111111 j!
b0000000 k!
b0000 l!
b1111 m!
1n!
0o!
b0000 p!
b1111 q!
b0000 r!
b1111 s!
1t!
0u!
b0000 v!
b1111 w!
b0000 x!
b1111 y!
1z!
0{!
b0000 |!
b1111 }!
b0000 ~!
b1111 !"
1""
0#"
b0000 $"
b1111 %"
b0000 &"
b1111 '"
1("
0)"
b0000 *"
b1111 +"
b0000 ,"
b1111 -"
1."
0/"
b0000 0"
b1111 1"
b1000 2"
b0111 3"
14"
05"
b0000 6"
b1111 7"
b00000000 8"
b01000000000000000000000000000 9"
b01000000000000000000000000000 :"
b00000000 ;"
b0000000000000000000000000000 <"
1="
b00000 >"
1?"
0@"
b00000000 A"
b11111111 B"
b00000000 C"
b11111110 D"
0E"
b10 F"
b00 G"
0H"
b1110 I"
b1111 J"
0K"
0L"
b0000 M"
b1110 N"
b0001 O"
b1111 P"
b1111 Q"
1R"
0S"
b0000 T"
b1111 U"
b0000 V"
b000000000000000000000000 W"
b0000000000000000 X"
b0000 Y"
1Z"
b00000000 ["
b000 \"
1]"
b000 ^"
1_"
b000 `"
1a"
b00000000 b"
1c"
b00 d"
1e"
b00 f"
b0000 g"
b0000 h"
b00000000 i"
1j"
b00 k"
1l"
b00 m"
b0000 n"
b0000 o"
1p"
b00 q"
1r"
b00 s"
b0000 t"
b0000 u"
b11111111 v"
1w"
b0000 x"
b1111 y"
1z"
b1111 {"
1|"
b1111 }"
1~"
b1111 !#
1"#
b1111 ##
1$#
b1111 %#
1&#
b1111 '#
b000000000000000000000000 (#
b0000000000000000000000000000 )#
b0000000000000000000000000000 *#
b0000000000000000000000000000 +#
b0000000000000000000000000000 ,#
b0000000000000000000000000000 -#
b0000000000000000000000000000 .#
b0000000000000000000000000000 /#
b0000000000000000000000000000 0#
b000 1#
b00000000 2#
b00000000 3#
b000 4#
b00000000 5#
b00000000 6#
b00000000 7#
b00000000 8#
b00000000 9#
b00000000 :#
b00000000 ;#
b00000000 <#
b00000000 =#
b00000000 >#
0?#
b00000000000000000000000000000000 @#
0A#
0B#
1C#
1D#
b11111111 E#
b00000000000000000000000000001000 F#
b00000000000000000000000000000011 G#
b00000000000000000000000000000001 H#
b00000000000000000000000000000010 I#
b00000000000000000000000000000100 J#
b00000000000000000000000000000000 K#
1L#
b00000000000000000000000000011000 M#
b00000000000000000000000000000101 N#
b00000000000000000000000000011100 O#
b00000000000000000000000000000111 P#
b0000 Q#
0R#
b00 S#
b00000000000000000000000000010000 T#
#5000
1?#
#10000
0?#
#15000
1?#
#20000
1#
0?#
#25000
b01000000101100000000000000000000 %
b01000000000110011001100110011010 &
b10000001 )
b10000000 *
b101100000000000000000000 +
b100110011001100110011010 ,
0.
b1000 /
b1000 0
b10 4
b10 5
b0001 8
0;
b01 @
b10000001 C
b10000000 D
b00000001 E
b101100000000000000000000 H
b100110011001100110011010 I
b1011000000000000000000000000 J
b0001 K
b1000 L
b01111111 M
b10 O
b01 P
b0001 S
0T
1U
b0001 V
b1110 W
b0111 Y
b1011 p
b11 r
b0101100000000000000000000 s
b0100110011001100110011010 t
b0101100000000000000000000 u
b0100110011001100110011010 v
b01011000000000000000000000000 w
b00001 x
b1001100110011001100110100000 y
b0100110011001100110011010000 z
b1101 #!
0%!
0'!
b11 )!
b01 *!
b1100 +!
0-!
b11 1!
b1100 3!
05!
b11 9!
b1100 ;!
0=!
b11 A!
b1100 C!
0E!
b11 I!
b0100 K!
1L!
0M!
1N!
0O!
1P!
b01 Q!
b1001100110011001100110100000 S!
b0100110011001100110011010000 T!
b0100110011001100110011010000 U!
b0100110011001100110011010000 V!
b0100110011001100110011010000 W!
b0100110011001100110011010000 X!
b1000000 Y!
b0000001 Z!
0[!
0\!
0]!
0^!
0_!
0`!
b00100110011001100110011010000 a!
b1011000000000000000000000000 e!
b0100110011001100110011010000 f!
b1011001100110011001100101111 h!
b1011001100110011001100101111 i!
b0000001 j!
b1000000 k!
b0010 s!
0t!
b0010 w!
b0011 y!
0z!
b0011 }!
b0011 !"
0""
b0011 %"
b0011 '"
0("
b0011 +"
b0011 -"
0."
b0011 1"
b1011 2"
b1011 3"
04"
15"
b1011 6"
b0000 7"
b01000000 8"
b01011000000000000000000000000 9"
b00100110011001100110011010000 :"
b10000000 ;"
b0110001100110011001100110000 <"
b10110 >"
0?"
b00010110 A"
b10000000 B"
b00010110 C"
1E"
b01 F"
b10 G"
1H"
b0000 J"
1K"
b1111 N"
b1111 O"
b1000 Q"
0R"
1S"
b1000 T"
b0111 U"
b1111 V"
b011000110011001100110011 W"
b0011001100110011 X"
b1101 Y"
0Z"
b01100011 ["
b110 \"
0]"
b101 ^"
0_"
b101 `"
0a"
b00110011 b"
0c"
b01 d"
0e"
b01 f"
b0011 g"
b0011 h"
b00110011 i"
0j"
b01 k"
0l"
b01 m"
b0011 n"
b0011 o"
0p"
b01 q"
0r"
b10 s"
b0011 t"
b0110 u"
b10000011 v"
b0001 {"
0|"
b0000 }"
0~"
b0000 !#
0"#
b0000 ##
0$#
b0000 %#
0&#
b0110 '#
b101100011001100110011001 (#
b1011000110011001100110011000 )#
b1100000000000000000000000000 *#
b0110001100110011001100110000 +#
b0110001100110011001100110000 ,#
b1000110011001100110011000000 -#
b1100110011001100110000000000 .#
b1100110011001100110000000000 /#
b1100000000000000000000000000 0#
1?#
b01000000001100011001100110011001 @#
0D#
b10000000 E#
#30000
0?#
#35000
1?#
#40000
0?#
#45000
1$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000 )
b00000000 *
b100000000000000000000000 +
b100000000000000000000000 ,
1.
b0000 /
b0000 0
b00 4
b00 5
b0000 8
1;
b00 @
b00000000 C
b00000000 D
b00000000 E
b100000000000000000000000 H
b100000000000000000000000 I
b1000000000000000000000000000 J
b0000 K
b0000 L
b11111111 M
b11 O
b00 P
b0000 S
1T
0U
b0000 V
b1111 W
b1111 Y
b1000 p
b00 r
b0100000000000000000000000 s
b0100000000000000000000000 t
b0100000000000000000000000 u
b0100000000000000000000000 v
b01000000000000000000000000000 w
b00000 x
b1000000000000000000000000000 y
b1000000000000000000000000000 z
b0000 #!
1%!
1'!
b00 )!
b00 *!
b0000 +!
1-!
b00 1!
b0000 3!
15!
b00 9!
b0000 ;!
1=!
b00 A!
b0000 C!
1E!
b00 I!
b1000 K!
0L!
1M!
0N!
1O!
0P!
b10 Q!
b1000000000000000000000000000 S!
b1000000000000000000000000000 T!
b1000000000000000000000000000 U!
b1000000000000000000000000000 V!
b1000000000000000000000000000 W!
b1000000000000000000000000000 X!
b0000000 Y!
b1111111 Z!
1[!
1\!
1]!
1^!
1_!
1`!
b01000000000000000000000000000 a!
b1000000000000000000000000000 e!
b1000000000000000000000000000 f!
0g!
b0111111111111111111111111111 h!
b1000000000000000000000000000 i!
b0000000 j!
b0000 m!
0n!
b0000 q!
b0000 s!
b0000 w!
b0000 y!
b0000 }!
b0000 !"
b0000 %"
b0000 '"
b0000 +"
b0000 -"
b0000 1"
b1000 2"
b1000 3"
b1000 6"
b00000000 8"
b01000000000000000000000000000 9"
b01000000000000000000000000000 :"
b00000000 ;"
b0000000000000000000000000000 <"
b00000 >"
1?"
b00000000 A"
b11111111 B"
b00000000 C"
0E"
b10 F"
b00 G"
0H"
b1111 J"
0K"
b1110 N"
b0001 O"
b1111 Q"
1R"
0S"
b0000 T"
b1111 U"
b0000 V"
b000000000000000000000000 W"
b0000000000000000 X"
b0000 Y"
1Z"
b00000000 ["
b000 \"
1]"
b000 ^"
1_"
b000 `"
1a"
b00000000 b"
1c"
b00 d"
1e"
b00 f"
b0000 g"
b0000 h"
b00000000 i"
1j"
b00 k"
1l"
b00 m"
b0000 n"
b0000 o"
1p"
b00 q"
1r"
b00 s"
b0000 t"
b0000 u"
b10000000 v"
0w"
b0000 y"
0z"
b0000 {"
b0000 '#
b000000000000000000000000 (#
b0000000000000000000000000000 )#
b0000000000000000000000000000 *#
b0000000000000000000000000000 +#
b0000000000000000000000000000 ,#
b0000000000000000000000000000 -#
b0000000000000000000000000000 .#
b0000000000000000000000000000 /#
b0000000000000000000000000000 0#
1?#
b00000000000000000000000000000000 @#
1D#
b11111111 E#
#50000
0?#
#55000
1?#
#60000
0?#
#65000
0$
1g!
b0111111111111111111111111111 i!
b1111111 j!
b0000000 k!
b1111 m!
1n!
b1111 q!
b1111 s!
1t!
b1111 w!
b1111 y!
1z!
b1111 }!
b1111 !"
1""
b1111 %"
b1111 '"
1("
b1111 +"
b1111 -"
1."
b1111 1"
b0111 3"
14"
05"
b0000 6"
b1111 7"
b11111111 v"
1w"
b1111 y"
1z"
b1111 {"
1|"
b1111 }"
1~"
b1111 !#
1"#
b1111 ##
1$#
b1111 %#
1&#
b1111 '#
1?#
#70000
0?#
#75000
1?#
#80000
0?#
#85000
1$
0g!
b1000000000000000000000000000 i!
b0000000 j!
b1000000 k!
b0000 m!
0n!
b0000 q!
b0000 s!
0t!
b0000 w!
b0000 y!
0z!
b0000 }!
b0000 !"
0""
b0000 %"
b0000 '"
0("
b0000 +"
b0000 -"
0."
b0000 1"
b1000 3"
04"
15"
b1000 6"
b0000 7"
b10000000 v"
0w"
b0000 y"
0z"
b0000 {"
0|"
b0000 }"
0~"
b0000 !#
0"#
b0000 ##
0$#
b0000 %#
0&#
b0000 '#
1?#
#90000
0?#
#95000
1?#
#100000
0?#
#105000
1?#
#110000
0?#
#115000
1?#
